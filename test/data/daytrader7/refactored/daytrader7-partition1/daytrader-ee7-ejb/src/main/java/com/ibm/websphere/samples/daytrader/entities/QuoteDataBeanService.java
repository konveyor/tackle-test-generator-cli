package com.ibm.websphere.samples.daytrader.entities;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;
import java.math.BigDecimal;
import javax.validation.constraints.NotNull;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for QuoteDataBean - Generated by Cardinal
 */

@Path("/QuoteDataBeanService")
public class QuoteDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(QuoteDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[QuoteDataBean] getHealth() called");
        return "QuoteDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[QuoteDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[QuoteDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/QuoteDataBean_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response QuoteDataBean_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        QuoteDataBean instQuoteDataBean;
        try {
            instQuoteDataBean = new QuoteDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor QuoteDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instQuoteDataBean);
        instQuoteDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/QuoteDataBean_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response QuoteDataBean_002(
        @FormParam("symbol") String symbol,
        @FormParam("companyName") String companyName,
        @FormParam("volume") String volume,
        @FormParam("price") String price,
        @FormParam("open") String open,
        @FormParam("low") String low,
        @FormParam("high") String high,
        @FormParam("change") String change,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        String companyName_fpar = companyName;

        double volume_fpar = Double.parseDouble(volume);

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        
        // convert reference ID(s) stored in "open" to physical/proxy object(s)
        BigDecimal open_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(open);

        
        // convert reference ID(s) stored in "low" to physical/proxy object(s)
        BigDecimal low_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(low);

        
        // convert reference ID(s) stored in "high" to physical/proxy object(s)
        BigDecimal high_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(high);

        double change_fpar = Double.parseDouble(change);

        // call constructor, add created object to cluster object manager, and return ref ID
        QuoteDataBean instQuoteDataBean;
        try {
            instQuoteDataBean = new QuoteDataBean(symbol_fpar, companyName_fpar, volume_fpar, price_fpar, open_fpar, low_fpar, high_fpar, change_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor QuoteDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instQuoteDataBean);
        instQuoteDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getRandomInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomInstance(
        @Context HttpServletResponse servletResponse
    ) {

        QuoteDataBean response;

        try {
        // call static method
            response = QuoteDataBean.getRandomInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomInstance() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/QuoteDataBean_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response QuoteDataBean_003(
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        // call constructor, add created object to cluster object manager, and return ref ID
        QuoteDataBean instQuoteDataBean;
        try {
            instQuoteDataBean = new QuoteDataBean(symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor QuoteDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instQuoteDataBean);
        instQuoteDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toHTML")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toHTML(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.toHTML();
        }
        catch (Throwable t) {
            String msg = "Call to method toHTML() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/print")
    public void print(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.print();
        }
        catch (Throwable t) {
            String msg = "Call to method print() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getSymbol")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSymbol(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getSymbol();
        }
        catch (Throwable t) {
            String msg = "Call to method getSymbol() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setSymbol")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setSymbol(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setSymbol(symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setSymbol() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCompanyName")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCompanyName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getCompanyName();
        }
        catch (Throwable t) {
            String msg = "Call to method getCompanyName() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCompanyName")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCompanyName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("companyName") String companyName,
        @Context HttpServletResponse servletResponse
    ) {

        String companyName_fpar = companyName;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setCompanyName(companyName_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCompanyName() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPrice")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getPrice();
        }
        catch (Throwable t) {
            String msg = "Call to method getPrice() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPrice")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("price") String price,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setPrice(price_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setPrice() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOpen")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOpen(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getOpen();
        }
        catch (Throwable t) {
            String msg = "Call to method getOpen() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOpen")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOpen(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("open") String open,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "open" to physical/proxy object(s)
        BigDecimal open_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(open);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setOpen(open_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOpen() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getLow")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getLow(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getLow();
        }
        catch (Throwable t) {
            String msg = "Call to method getLow() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setLow")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setLow(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("low") String low,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "low" to physical/proxy object(s)
        BigDecimal low_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(low);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setLow(low_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setLow() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getHigh")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHigh(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getHigh();
        }
        catch (Throwable t) {
            String msg = "Call to method getHigh() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setHigh")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setHigh(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("high") String high,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "high" to physical/proxy object(s)
        BigDecimal high_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(high);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setHigh(high_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setHigh() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getChange")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getChange(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getChange();
        }
        catch (Throwable t) {
            String msg = "Call to method getChange() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setChange")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setChange(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("change") String change,
        @Context HttpServletResponse servletResponse
    ) {

        double change_fpar = Double.parseDouble(change);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setChange(change_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setChange() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getVolume")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getVolume(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.getVolume();
        }
        catch (Throwable t) {
            String msg = "Call to method getVolume() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setVolume")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setVolume(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("volume") String volume,
        @Context HttpServletResponse servletResponse
    ) {

        double volume_fpar = Double.parseDouble(volume);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instQuoteDataBean.setVolume(volume_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setVolume() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/hashCode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response hashCode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.hashCode();
        }
        catch (Throwable t) {
            String msg = "Call to method hashCode() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/equals")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response equals(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("object") String object,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "object" to physical/proxy object(s)
        Object object_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(object);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        QuoteDataBean instQuoteDataBean = (QuoteDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instQuoteDataBean.equals(object_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method equals() of QuoteDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[QuoteDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}