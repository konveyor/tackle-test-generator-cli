package com.ibm.websphere.samples.daytrader.entities;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Collection;
import java.util.Date;
import javax.validation.constraints.NotNull;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for AccountDataBean - Generated by Cardinal
 */

@Path("/AccountDataBeanService")
public class AccountDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(AccountDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[AccountDataBean] getHealth() called");
        return "AccountDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[AccountDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[AccountDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/AccountDataBean_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response AccountDataBean_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        AccountDataBean instAccountDataBean;
        try {
            instAccountDataBean = new AccountDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor AccountDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instAccountDataBean);
        instAccountDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/AccountDataBean_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response AccountDataBean_002(
        @FormParam("accountID") String accountID,
        @FormParam("loginCount") String loginCount,
        @FormParam("logoutCount") String logoutCount,
        @FormParam("lastLogin") String lastLogin,
        @FormParam("creationDate") String creationDate,
        @FormParam("balance") String balance,
        @FormParam("openBalance") String openBalance,
        @FormParam("profileID") String profileID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "accountID" to physical/proxy object(s)
        Integer accountID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(accountID);

        int loginCount_fpar = Integer.parseInt(loginCount);

        int logoutCount_fpar = Integer.parseInt(logoutCount);

        
        // convert reference ID(s) stored in "lastLogin" to physical/proxy object(s)
        Date lastLogin_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(lastLogin);

        
        // convert reference ID(s) stored in "creationDate" to physical/proxy object(s)
        Date creationDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(creationDate);

        
        // convert reference ID(s) stored in "balance" to physical/proxy object(s)
        BigDecimal balance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(balance);

        
        // convert reference ID(s) stored in "openBalance" to physical/proxy object(s)
        BigDecimal openBalance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(openBalance);

        String profileID_fpar = profileID;

        // call constructor, add created object to cluster object manager, and return ref ID
        AccountDataBean instAccountDataBean;
        try {
            instAccountDataBean = new AccountDataBean(accountID_fpar, loginCount_fpar, logoutCount_fpar, lastLogin_fpar, creationDate_fpar, balance_fpar, openBalance_fpar, profileID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor AccountDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        logger.info("AccountDataBean object: "+instAccountDataBean);
        String refid = ClusterObjectManager.putObject(instAccountDataBean);
        logger.info("refid: "+refid);
        instAccountDataBean.setKlu__referenceID(refid);
        logger.info("Set refid in physical object: "+instAccountDataBean.getKlu__referenceID());
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/AccountDataBean_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response AccountDataBean_003(
        @FormParam("loginCount") String loginCount,
        @FormParam("logoutCount") String logoutCount,
        @FormParam("lastLogin") String lastLogin,
        @FormParam("creationDate") String creationDate,
        @FormParam("balance") String balance,
        @FormParam("openBalance") String openBalance,
        @FormParam("profileID") String profileID,
        @Context HttpServletResponse servletResponse
    ) {

        int loginCount_fpar = Integer.parseInt(loginCount);

        int logoutCount_fpar = Integer.parseInt(logoutCount);

        
        // convert reference ID(s) stored in "lastLogin" to physical/proxy object(s)
        Date lastLogin_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(lastLogin);

        
        // convert reference ID(s) stored in "creationDate" to physical/proxy object(s)
        Date creationDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(creationDate);

        
        // convert reference ID(s) stored in "balance" to physical/proxy object(s)
        BigDecimal balance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(balance);

        
        // convert reference ID(s) stored in "openBalance" to physical/proxy object(s)
        BigDecimal openBalance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(openBalance);

        String profileID_fpar = profileID;

        // call constructor, add created object to cluster object manager, and return ref ID
        AccountDataBean instAccountDataBean;
        try {
            instAccountDataBean = new AccountDataBean(loginCount_fpar, logoutCount_fpar, lastLogin_fpar, creationDate_fpar, balance_fpar, openBalance_fpar, profileID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor AccountDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instAccountDataBean);
        instAccountDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getRandomInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomInstance(
        @Context HttpServletResponse servletResponse
    ) {

        AccountDataBean response;

        try {
        // call static method
            response = AccountDataBean.getRandomInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomInstance() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toHTML")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toHTML(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.toHTML();
        }
        catch (Throwable t) {
            String msg = "Call to method toHTML() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/print")
    public void print(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.print();
        }
        catch (Throwable t) {
            String msg = "Call to method print() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAccountID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Integer response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getAccountID();
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountID() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAccountID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAccountID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("accountID") String accountID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "accountID" to physical/proxy object(s)
        Integer accountID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(accountID);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setAccountID(accountID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setAccountID() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getLoginCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getLoginCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getLoginCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getLoginCount() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setLoginCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setLoginCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("loginCount") String loginCount,
        @Context HttpServletResponse servletResponse
    ) {

        int loginCount_fpar = Integer.parseInt(loginCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setLoginCount(loginCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setLoginCount() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getLogoutCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getLogoutCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getLogoutCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getLogoutCount() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setLogoutCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setLogoutCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("logoutCount") String logoutCount,
        @Context HttpServletResponse servletResponse
    ) {

        int logoutCount_fpar = Integer.parseInt(logoutCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setLogoutCount(logoutCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setLogoutCount() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getLastLogin")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getLastLogin(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Date response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getLastLogin();
        }
        catch (Throwable t) {
            String msg = "Call to method getLastLogin() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setLastLogin")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setLastLogin(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("lastLogin") String lastLogin,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "lastLogin" to physical/proxy object(s)
        Date lastLogin_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(lastLogin);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setLastLogin(lastLogin_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setLastLogin() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCreationDate")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCreationDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Date response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getCreationDate();
        }
        catch (Throwable t) {
            String msg = "Call to method getCreationDate() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCreationDate")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCreationDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("creationDate") String creationDate,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "creationDate" to physical/proxy object(s)
        Date creationDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(creationDate);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setCreationDate(creationDate_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCreationDate() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getBalance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getBalance(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getBalance();
        }
        catch (Throwable t) {
            String msg = "Call to method getBalance() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setBalance")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setBalance(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("balance") String balance,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "balance" to physical/proxy object(s)
        BigDecimal balance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(balance);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setBalance(balance_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setBalance() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOpenBalance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOpenBalance(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getOpenBalance();
        }
        catch (Throwable t) {
            String msg = "Call to method getOpenBalance() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOpenBalance")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOpenBalance(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("openBalance") String openBalance,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "openBalance" to physical/proxy object(s)
        BigDecimal openBalance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(openBalance);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setOpenBalance(openBalance_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOpenBalance() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getProfileID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProfileID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getProfileID();
        }
        catch (Throwable t) {
            String msg = "Call to method getProfileID() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setProfileID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setProfileID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("profileID") String profileID,
        @Context HttpServletResponse servletResponse
    ) {

        String profileID_fpar = profileID;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setProfileID(profileID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setProfileID() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrders")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Collection<OrderDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getOrders();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrders() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrders")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orders") String orders,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orders" to physical/proxy object(s)
        Collection<OrderDataBean> orders_fpar = (Collection<OrderDataBean>)SerializationUtil.decodeWithDynamicTypeCheck(orders);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setOrders(orders_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrders() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getHoldings")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHoldings(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Collection<HoldingDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getHoldings();
        }
        catch (Throwable t) {
            String msg = "Call to method getHoldings() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setHoldings")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setHoldings(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holdings") String holdings,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holdings" to physical/proxy object(s)
        Collection<HoldingDataBean> holdings_fpar = (Collection<HoldingDataBean>)SerializationUtil.decodeWithDynamicTypeCheck(holdings);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setHoldings(holdings_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setHoldings() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getProfile")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getProfile(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        AccountProfileDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.getProfile();
        }
        catch (Throwable t) {
            String msg = "Call to method getProfile() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setProfile")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setProfile(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("profile") String profile,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "profile" to physical/proxy object(s)
        AccountProfileDataBean profile_fpar = (AccountProfileDataBean)SerializationUtil.decodeWithDynamicTypeCheck(profile);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.setProfile(profile_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setProfile() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/login")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void login(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("password") String password,
        @Context HttpServletResponse servletResponse
    ) {

        String password_fpar = password;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.login(password_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method login() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/logout")
    public void logout(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountDataBean.logout();
        }
        catch (Throwable t) {
            String msg = "Call to method logout() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/hashCode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response hashCode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.hashCode();
        }
        catch (Throwable t) {
            String msg = "Call to method hashCode() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/equals")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response equals(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("object") String object,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "object" to physical/proxy object(s)
        Object object_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(object);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountDataBean instAccountDataBean = (AccountDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountDataBean.equals(object_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method equals() of AccountDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}