package com.ibm.websphere.samples.daytrader;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.Collection;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import javax.naming.InitialContext;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.direct.TradeDirect;
import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBLocal;
import com.ibm.websphere.samples.daytrader.ejb3.TradeSLSBRemote;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for TradeAction - Generated by Cardinal
 */

@Path("/TradeActionService")
public class TradeActionService {
    private static final Logger logger = CardinalLogger.getLogger(TradeActionService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[TradeAction] getHealth() called");
        return "TradeActionService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeActionService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeAction] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/TradeAction_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response TradeAction_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        TradeAction instTradeAction;
        try {
            instTradeAction = new TradeAction();
        }
        catch (Throwable t) {
            String msg = "Call to constructor TradeAction() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instTradeAction);
        instTradeAction.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/TradeAction_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response TradeAction_002(
        @FormParam("trade") String trade,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "trade" to physical/proxy object(s)
        TradeServices trade_fpar = (TradeServices)SerializationUtil.decodeWithDynamicTypeCheck(trade);

        // call constructor, add created object to cluster object manager, and return ref ID
        TradeAction instTradeAction;
        try {
            instTradeAction = new TradeAction(trade_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor TradeAction() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instTradeAction);
        instTradeAction.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getMarketSummary")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMarketSummary(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        MarketSummaryDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getMarketSummary();
        }
        catch (Throwable t) {
            String msg = "Call to method getMarketSummary() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getMarketSummaryInternal")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMarketSummaryInternal(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        MarketSummaryDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getMarketSummaryInternal();
        }
        catch (Throwable t) {
            String msg = "Call to method getMarketSummaryInternal() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/buy")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response buy(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("symbol") String symbol,
        @FormParam("quantity") String quantity,
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String symbol_fpar = symbol;

        double quantity_fpar = Double.parseDouble(quantity);

        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.buy(userID_fpar, symbol_fpar, quantity_fpar, orderProcessingMode_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method buy() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/sell_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response sell_003(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("holdingID") String holdingID,
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        int holdingID_fpar = Integer.parseInt(holdingID);

        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.sell(userID_fpar, holdingID_fpar, orderProcessingMode_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method sell() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/sell_004")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response sell_004(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("holdingID") String holdingID,
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.sell(userID_fpar, holdingID_fpar, orderProcessingMode_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method sell() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/queueOrder")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void queueOrder(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeAction.queueOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method queueOrder() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/completeOrder")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response completeOrder(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.completeOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method completeOrder() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/cancelOrder")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void cancelOrder(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeAction.cancelOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method cancelOrder() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/orderCompleted")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void orderCompleted(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("orderID") String orderID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeAction.orderCompleted(userID_fpar, orderID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method orderCompleted() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrders")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<?> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getOrders(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getOrders() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getClosedOrders")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getClosedOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<?> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getClosedOrders(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getClosedOrders() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/createQuote")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response createQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @FormParam("companyName") String companyName,
        @FormParam("price") String price,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        String companyName_fpar = companyName;

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.createQuote(symbol_fpar, companyName_fpar, price_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method createQuote() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAllQuotes")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAllQuotes(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Collection<?> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getAllQuotes();
        }
        catch (Throwable t) {
            String msg = "Call to method getAllQuotes() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getQuote")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getQuote(symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getQuote() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/updateQuotePriceVolume")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateQuotePriceVolume(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @FormParam("changeFactor") String changeFactor,
        @FormParam("sharesTraded") String sharesTraded,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        
        // convert reference ID(s) stored in "changeFactor" to physical/proxy object(s)
        BigDecimal changeFactor_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(changeFactor);

        double sharesTraded_fpar = Double.parseDouble(sharesTraded);

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.updateQuotePriceVolume(symbol_fpar, changeFactor_fpar, sharesTraded_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method updateQuotePriceVolume() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getHoldings")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHoldings(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<?> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getHoldings(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getHoldings() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getHolding")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHolding(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holdingID") String holdingID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        HoldingDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getHolding(holdingID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getHolding() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAccountData")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountData(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getAccountData(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountData() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAccountProfileData")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountProfileData(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        AccountProfileDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.getAccountProfileData(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountProfileData() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/updateAccountProfile")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateAccountProfile(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("accountProfileData") String accountProfileData,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "accountProfileData" to physical/proxy object(s)
        AccountProfileDataBean accountProfileData_fpar = (AccountProfileDataBean)SerializationUtil.decodeWithDynamicTypeCheck(accountProfileData);

        AccountProfileDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.updateAccountProfile(accountProfileData_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method updateAccountProfile() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/login")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response login(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.login(userID_fpar, password_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method login() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/logout")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void logout(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeAction.logout(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method logout() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/register_005")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response register_005(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @FormParam("fullname") String fullname,
        @FormParam("address") String address,
        @FormParam("email") String email,
        @FormParam("creditCard") String creditCard,
        @FormParam("openBalance") String openBalance,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        String fullname_fpar = fullname;

        String address_fpar = address;

        String email_fpar = email;

        String creditCard_fpar = creditCard;

        
        // convert reference ID(s) stored in "openBalance" to physical/proxy object(s)
        BigDecimal openBalance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(openBalance);

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.register(userID_fpar, password_fpar, fullname_fpar, address_fpar, email_fpar, creditCard_fpar, openBalance_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method register() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/register_006")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response register_006(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @FormParam("fullname") String fullname,
        @FormParam("address") String address,
        @FormParam("email") String email,
        @FormParam("creditCard") String creditCard,
        @FormParam("openBalanceString") String openBalanceString,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        String fullname_fpar = fullname;

        String address_fpar = address;

        String email_fpar = email;

        String creditCard_fpar = creditCard;

        String openBalanceString_fpar = openBalanceString;

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.register(userID_fpar, password_fpar, fullname_fpar, address_fpar, email_fpar, creditCard_fpar, openBalanceString_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method register() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/resetTrade")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response resetTrade(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("deleteAll") String deleteAll,
        @Context HttpServletResponse servletResponse
    ) {

        boolean deleteAll_fpar = Boolean.parseBoolean(deleteAll);

        RunStatsDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeAction instTradeAction = (TradeAction)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeAction.resetTrade(deleteAll_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method resetTrade() of TradeAction raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeAction] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}