package com.ibm.websphere.samples.daytrader.util;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Random;

/**
 * Service class for TradeConfig - Generated by Cardinal
 */

@Path("/TradeConfigService")
public class TradeConfigService {
    private static final Logger logger = CardinalLogger.getLogger(TradeConfigService.class);

    // default constructor service
    @POST
    @Path("/TradeConfig_default_ctor")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response TradeConfig_default_ctor() {
        TradeConfig instTradeConfig = new TradeConfig();
        String refid = ClusterObjectManager.putObject(instTradeConfig);
        instTradeConfig.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        logger.info("[TradeConfigService] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[TradeConfig] getHealth() called");
        return "TradeConfigService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeConfigService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeConfig] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }



    // getter service for field "PENNY_STOCK_PRICE" (generated)
    @GET 
    @Path("/get__PENNY_STOCK_PRICE")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__PENNY_STOCK_PRICE(
        @Context HttpServletResponse servletResponse
    ) {
        BigDecimal response;
        response = TradeConfig.PENNY_STOCK_PRICE;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "PENNY_STOCK_PRICE" (generated)
    @POST
    @Path("/set__PENNY_STOCK_PRICE")
    public void set__PENNY_STOCK_PRICE(
        @FormParam("PENNY_STOCK_PRICE") String PENNY_STOCK_PRICE,
        @Context HttpServletResponse servletResponse
    ) {
        
        // convert reference ID(s) stored in "PENNY_STOCK_PRICE" to physical/proxy object(s)
        BigDecimal PENNY_STOCK_PRICE_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(PENNY_STOCK_PRICE);

        TradeConfig.PENNY_STOCK_PRICE = PENNY_STOCK_PRICE_fpar;
    }
    // getter service for field "PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER" (generated)
    @GET 
    @Path("/get__PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER(
        @Context HttpServletResponse servletResponse
    ) {
        BigDecimal response;
        response = TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER" (generated)
    @POST
    @Path("/set__PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER")
    public void set__PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER(
        @FormParam("PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER") String PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER,
        @Context HttpServletResponse servletResponse
    ) {
        
        // convert reference ID(s) stored in "PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER" to physical/proxy object(s)
        BigDecimal PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER);

        TradeConfig.PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER = PENNY_STOCK_RECOVERY_MIRACLE_MULTIPLIER_fpar;
    }
    // getter service for field "MAXIMUM_STOCK_PRICE" (generated)
    @GET 
    @Path("/get__MAXIMUM_STOCK_PRICE")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__MAXIMUM_STOCK_PRICE(
        @Context HttpServletResponse servletResponse
    ) {
        BigDecimal response;
        response = TradeConfig.MAXIMUM_STOCK_PRICE;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "MAXIMUM_STOCK_PRICE" (generated)
    @POST
    @Path("/set__MAXIMUM_STOCK_PRICE")
    public void set__MAXIMUM_STOCK_PRICE(
        @FormParam("MAXIMUM_STOCK_PRICE") String MAXIMUM_STOCK_PRICE,
        @Context HttpServletResponse servletResponse
    ) {
        
        // convert reference ID(s) stored in "MAXIMUM_STOCK_PRICE" to physical/proxy object(s)
        BigDecimal MAXIMUM_STOCK_PRICE_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(MAXIMUM_STOCK_PRICE);

        TradeConfig.MAXIMUM_STOCK_PRICE = MAXIMUM_STOCK_PRICE_fpar;
    }
    // getter service for field "MAXIMUM_STOCK_SPLIT_MULTIPLIER" (generated)
    @GET 
    @Path("/get__MAXIMUM_STOCK_SPLIT_MULTIPLIER")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__MAXIMUM_STOCK_SPLIT_MULTIPLIER(
        @Context HttpServletResponse servletResponse
    ) {
        BigDecimal response;
        response = TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "MAXIMUM_STOCK_SPLIT_MULTIPLIER" (generated)
    @POST
    @Path("/set__MAXIMUM_STOCK_SPLIT_MULTIPLIER")
    public void set__MAXIMUM_STOCK_SPLIT_MULTIPLIER(
        @FormParam("MAXIMUM_STOCK_SPLIT_MULTIPLIER") String MAXIMUM_STOCK_SPLIT_MULTIPLIER,
        @Context HttpServletResponse servletResponse
    ) {
        
        // convert reference ID(s) stored in "MAXIMUM_STOCK_SPLIT_MULTIPLIER" to physical/proxy object(s)
        BigDecimal MAXIMUM_STOCK_SPLIT_MULTIPLIER_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(MAXIMUM_STOCK_SPLIT_MULTIPLIER);

        TradeConfig.MAXIMUM_STOCK_SPLIT_MULTIPLIER = MAXIMUM_STOCK_SPLIT_MULTIPLIER_fpar;
    }
    // getter service for field "runTimeModeNames" (generated)
    @GET 
    @Path("/get__runTimeModeNames")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__runTimeModeNames(
        @Context HttpServletResponse servletResponse
    ) {
        String[] response;
        response = TradeConfig.runTimeModeNames;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "runTimeModeNames" (generated)
    @POST
    @Path("/set__runTimeModeNames")
    public void set__runTimeModeNames(
        @FormParam("runTimeModeNames") String runTimeModeNames,
        @Context HttpServletResponse servletResponse
    ) {
        
        // deserialize string to primitive array
        String[] runTimeModeNames_fpar = (String[])SerializationUtil.decode(runTimeModeNames);

        TradeConfig.runTimeModeNames = runTimeModeNames_fpar;
    }
    // getter service for field "runTimeMode" (generated)
    @GET 
    @Path("/get__runTimeMode")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__runTimeMode(
        @Context HttpServletResponse servletResponse
    ) {
        int response;
        response = TradeConfig.runTimeMode;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "runTimeMode" (generated)
    @POST
    @Path("/set__runTimeMode")
    public void set__runTimeMode(
        @FormParam("runTimeMode") String runTimeMode,
        @Context HttpServletResponse servletResponse
    ) {
        int runTimeMode_fpar = Integer.parseInt(runTimeMode);
        TradeConfig.runTimeMode = runTimeMode_fpar;
    }
    // getter service for field "orderProcessingModeNames" (generated)
    @GET 
    @Path("/get__orderProcessingModeNames")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__orderProcessingModeNames(
        @Context HttpServletResponse servletResponse
    ) {
        String[] response;
        response = TradeConfig.orderProcessingModeNames;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "orderProcessingModeNames" (generated)
    @POST
    @Path("/set__orderProcessingModeNames")
    public void set__orderProcessingModeNames(
        @FormParam("orderProcessingModeNames") String orderProcessingModeNames,
        @Context HttpServletResponse servletResponse
    ) {
        
        // deserialize string to primitive array
        String[] orderProcessingModeNames_fpar = (String[])SerializationUtil.decode(orderProcessingModeNames);

        TradeConfig.orderProcessingModeNames = orderProcessingModeNames_fpar;
    }
    // getter service for field "orderProcessingMode" (generated)
    @GET 
    @Path("/get__orderProcessingMode")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__orderProcessingMode(
        @Context HttpServletResponse servletResponse
    ) {
        int response;
        response = TradeConfig.orderProcessingMode;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "orderProcessingMode" (generated)
    @POST
    @Path("/set__orderProcessingMode")
    public void set__orderProcessingMode(
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {
        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);
        TradeConfig.orderProcessingMode = orderProcessingMode_fpar;
    }
    // getter service for field "accessModeNames" (generated)
    @GET 
    @Path("/get__accessModeNames")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__accessModeNames(
        @Context HttpServletResponse servletResponse
    ) {
        String[] response;
        response = TradeConfig.accessModeNames;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "accessModeNames" (generated)
    @POST
    @Path("/set__accessModeNames")
    public void set__accessModeNames(
        @FormParam("accessModeNames") String accessModeNames,
        @Context HttpServletResponse servletResponse
    ) {
        
        // deserialize string to primitive array
        String[] accessModeNames_fpar = (String[])SerializationUtil.decode(accessModeNames);

        TradeConfig.accessModeNames = accessModeNames_fpar;
    }
    // getter service for field "webInterfaceNames" (generated)
    @GET 
    @Path("/get__webInterfaceNames")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__webInterfaceNames(
        @Context HttpServletResponse servletResponse
    ) {
        String[] response;
        response = TradeConfig.webInterfaceNames;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "webInterfaceNames" (generated)
    @POST
    @Path("/set__webInterfaceNames")
    public void set__webInterfaceNames(
        @FormParam("webInterfaceNames") String webInterfaceNames,
        @Context HttpServletResponse servletResponse
    ) {
        
        // deserialize string to primitive array
        String[] webInterfaceNames_fpar = (String[])SerializationUtil.decode(webInterfaceNames);

        TradeConfig.webInterfaceNames = webInterfaceNames_fpar;
    }
    // getter service for field "webInterface" (generated)
    @GET 
    @Path("/get__webInterface")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__webInterface(
        @Context HttpServletResponse servletResponse
    ) {
        int response;
        response = TradeConfig.webInterface;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "webInterface" (generated)
    @POST
    @Path("/set__webInterface")
    public void set__webInterface(
        @FormParam("webInterface") String webInterface,
        @Context HttpServletResponse servletResponse
    ) {
        int webInterface_fpar = Integer.parseInt(webInterface);
        TradeConfig.webInterface = webInterface_fpar;
    }
    // getter service for field "JDBC_UID" (generated)
    @GET 
    @Path("/get__JDBC_UID")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__JDBC_UID(
        @Context HttpServletResponse servletResponse
    ) {
        String response;
        response = TradeConfig.JDBC_UID;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "JDBC_UID" (generated)
    @POST
    @Path("/set__JDBC_UID")
    public void set__JDBC_UID(
        @FormParam("JDBC_UID") String JDBC_UID,
        @Context HttpServletResponse servletResponse
    ) {
        String JDBC_UID_fpar = JDBC_UID;
        TradeConfig.JDBC_UID = JDBC_UID_fpar;
    }
    // getter service for field "JDBC_PWD" (generated)
    @GET 
    @Path("/get__JDBC_PWD")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__JDBC_PWD(
        @Context HttpServletResponse servletResponse
    ) {
        String response;
        response = TradeConfig.JDBC_PWD;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "JDBC_PWD" (generated)
    @POST
    @Path("/set__JDBC_PWD")
    public void set__JDBC_PWD(
        @FormParam("JDBC_PWD") String JDBC_PWD,
        @Context HttpServletResponse servletResponse
    ) {
        String JDBC_PWD_fpar = JDBC_PWD;
        TradeConfig.JDBC_PWD = JDBC_PWD_fpar;
    }
    // getter service for field "DS_NAME" (generated)
    @GET 
    @Path("/get__DS_NAME")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__DS_NAME(
        @Context HttpServletResponse servletResponse
    ) {
        String response;
        response = TradeConfig.DS_NAME;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "DS_NAME" (generated)
    @POST
    @Path("/set__DS_NAME")
    public void set__DS_NAME(
        @FormParam("DS_NAME") String DS_NAME,
        @Context HttpServletResponse servletResponse
    ) {
        String DS_NAME_fpar = DS_NAME;
        TradeConfig.DS_NAME = DS_NAME_fpar;
    }
    // getter service for field "JDBCDriverNeedsGlobalTransation" (generated)
    @GET 
    @Path("/get__JDBCDriverNeedsGlobalTransation")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__JDBCDriverNeedsGlobalTransation(
        @Context HttpServletResponse servletResponse
    ) {
        boolean response;
        response = TradeConfig.JDBCDriverNeedsGlobalTransation;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "JDBCDriverNeedsGlobalTransation" (generated)
    @POST
    @Path("/set__JDBCDriverNeedsGlobalTransation")
    public void set__JDBCDriverNeedsGlobalTransation(
        @FormParam("JDBCDriverNeedsGlobalTransation") String JDBCDriverNeedsGlobalTransation,
        @Context HttpServletResponse servletResponse
    ) {
        boolean JDBCDriverNeedsGlobalTransation_fpar = Boolean.parseBoolean(JDBCDriverNeedsGlobalTransation);
        TradeConfig.JDBCDriverNeedsGlobalTransation = JDBCDriverNeedsGlobalTransation_fpar;
    }
    // getter service for field "DATASOURCE" (generated)
    @GET 
    @Path("/get__DATASOURCE")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__DATASOURCE(
        @Context HttpServletResponse servletResponse
    ) {
        String response;
        response = TradeConfig.DATASOURCE;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "DATASOURCE" (generated)
    @POST
    @Path("/set__DATASOURCE")
    public void set__DATASOURCE(
        @FormParam("DATASOURCE") String DATASOURCE,
        @Context HttpServletResponse servletResponse
    ) {
        String DATASOURCE_fpar = DATASOURCE;
        TradeConfig.DATASOURCE = DATASOURCE_fpar;
    }
    // getter service for field "KEYBLOCKSIZE" (generated)
    @GET 
    @Path("/get__KEYBLOCKSIZE")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__KEYBLOCKSIZE(
        @Context HttpServletResponse servletResponse
    ) {
        int response;
        response = TradeConfig.KEYBLOCKSIZE;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "KEYBLOCKSIZE" (generated)
    @POST
    @Path("/set__KEYBLOCKSIZE")
    public void set__KEYBLOCKSIZE(
        @FormParam("KEYBLOCKSIZE") String KEYBLOCKSIZE,
        @Context HttpServletResponse servletResponse
    ) {
        int KEYBLOCKSIZE_fpar = Integer.parseInt(KEYBLOCKSIZE);
        TradeConfig.KEYBLOCKSIZE = KEYBLOCKSIZE_fpar;
    }
    // getter service for field "QUOTES_PER_PAGE" (generated)
    @GET 
    @Path("/get__QUOTES_PER_PAGE")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__QUOTES_PER_PAGE(
        @Context HttpServletResponse servletResponse
    ) {
        int response;
        response = TradeConfig.QUOTES_PER_PAGE;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "QUOTES_PER_PAGE" (generated)
    @POST
    @Path("/set__QUOTES_PER_PAGE")
    public void set__QUOTES_PER_PAGE(
        @FormParam("QUOTES_PER_PAGE") String QUOTES_PER_PAGE,
        @Context HttpServletResponse servletResponse
    ) {
        int QUOTES_PER_PAGE_fpar = Integer.parseInt(QUOTES_PER_PAGE);
        TradeConfig.QUOTES_PER_PAGE = QUOTES_PER_PAGE_fpar;
    }
    // getter service for field "RND_USER" (generated)
    @GET 
    @Path("/get__RND_USER")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__RND_USER(
        @Context HttpServletResponse servletResponse
    ) {
        boolean response;
        response = TradeConfig.RND_USER;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "RND_USER" (generated)
    @POST
    @Path("/set__RND_USER")
    public void set__RND_USER(
        @FormParam("RND_USER") String RND_USER,
        @Context HttpServletResponse servletResponse
    ) {
        boolean RND_USER_fpar = Boolean.parseBoolean(RND_USER);
        TradeConfig.RND_USER = RND_USER_fpar;
    }
    // getter service for field "webUI" (generated)
    @GET 
    @Path("/get__webUI")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__webUI(
        @Context HttpServletResponse servletResponse
    ) {
        String[][] response;
        response = TradeConfig.webUI;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();


        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "webUI" (generated)
    @POST
    @Path("/set__webUI")
    public void set__webUI(
        @FormParam("webUI") String webUI,
        @Context HttpServletResponse servletResponse
    ) {
        
        // deserialize string to primitive array
        String[][] webUI_fpar = (String[][])SerializationUtil.decode(webUI);

        TradeConfig.webUI = webUI_fpar;
    }


    @POST
    @Path("/getPage")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPage(
        @FormParam("pageNumber") String pageNumber,
        @Context HttpServletResponse servletResponse
    ) {

        int pageNumber_fpar = Integer.parseInt(pageNumber);

        String response;

        try {
        // call static method
            response = TradeConfig.getPage(pageNumber_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method getPage() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getRunTimeModeNames")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRunTimeModeNames(
        @Context HttpServletResponse servletResponse
    ) {

        java.lang.String[] response;

        try {
        // call static method
            response = TradeConfig.getRunTimeModeNames();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRunTimeModeNames() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getScenarioAction")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getScenarioAction(
        @FormParam("newUser") String newUser,
        @Context HttpServletResponse servletResponse
    ) {

        boolean newUser_fpar = Boolean.parseBoolean(newUser);

        char response;

        try {
        // call static method
            response = TradeConfig.getScenarioAction(newUser_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method getScenarioAction() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getUserID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getUserID(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.getUserID();
        }
        catch (Throwable t) {
            String msg = "Call to static method getUserID() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getOrderFee")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderFee(
        @FormParam("orderType") String orderType,
        @Context HttpServletResponse servletResponse
    ) {

        String orderType_fpar = orderType;

        BigDecimal response;

        try {
        // call static method
            response = TradeConfig.getOrderFee(orderType_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method getOrderFee() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/incrementSellDeficit")
    public void incrementSellDeficit(
        @Context HttpServletResponse servletResponse
    ) {

        try {
        // call static method
            TradeConfig.incrementSellDeficit();
        }
        catch (Throwable t) {
            String msg = "Call to static method incrementSellDeficit() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/nextUserID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response nextUserID(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.nextUserID();
        }
        catch (Throwable t) {
            String msg = "Call to static method nextUserID() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/random")
    @Produces(MediaType.APPLICATION_JSON)
    public Response random(
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        try {
        // call static method
            response = TradeConfig.random();
        }
        catch (Throwable t) {
            String msg = "Call to static method random() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndAddress")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndAddress(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndAddress();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndAddress() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndBalance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndBalance(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndBalance();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndBalance() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndCreditCard")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndCreditCard(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndCreditCard();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndCreditCard() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndEmail")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndEmail(
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String response;

        try {
        // call static method
            response = TradeConfig.rndEmail(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method rndEmail() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndFullName")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndFullName(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndFullName();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndFullName() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndInt")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndInt(
        @FormParam("i") String i,
        @Context HttpServletResponse servletResponse
    ) {

        int i_fpar = Integer.parseInt(i);

        int response;

        try {
        // call static method
            response = TradeConfig.rndInt(i_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method rndInt() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndFloat")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndFloat(
        @FormParam("i") String i,
        @Context HttpServletResponse servletResponse
    ) {

        int i_fpar = Integer.parseInt(i);

        float response;

        try {
        // call static method
            response = TradeConfig.rndFloat(i_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method rndFloat() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndBigDecimal")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndBigDecimal(
        @FormParam("f") String f,
        @Context HttpServletResponse servletResponse
    ) {

        float f_fpar = Float.parseFloat(f);

        BigDecimal response;

        try {
        // call static method
            response = TradeConfig.rndBigDecimal(f_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method rndBigDecimal() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndBoolean")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndBoolean(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.rndBoolean();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndBoolean() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndNewUserID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndNewUserID(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndNewUserID();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndNewUserID() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndPrice")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndPrice(
        @Context HttpServletResponse servletResponse
    ) {

        float response;

        try {
        // call static method
            response = TradeConfig.rndPrice();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndPrice() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getRandomPriceChangeFactor")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomPriceChangeFactor(
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        try {
        // call static method
            response = TradeConfig.getRandomPriceChangeFactor();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomPriceChangeFactor() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndQuantity")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndQuantity(
        @Context HttpServletResponse servletResponse
    ) {

        float response;

        try {
        // call static method
            response = TradeConfig.rndQuantity();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndQuantity() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndSymbol")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndSymbol(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndSymbol();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndSymbol() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndSymbols")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndSymbols(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndSymbols();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndSymbols() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/rndUserID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response rndUserID(
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        try {
        // call static method
            response = TradeConfig.rndUserID();
        }
        catch (Throwable t) {
            String msg = "Call to static method rndUserID() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setRunTimeModeNames")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setRunTimeModeNames(
        @FormParam("newRunTimeModeNames") String newRunTimeModeNames,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "newRunTimeModeNames" to physical/proxy object(s)
        java.lang.String [] newRunTimeModeNames_fpar = (java.lang.String [])SerializationUtil.decodeWithDynamicTypeCheck(newRunTimeModeNames);

        try {
        // call static method
            TradeConfig.setRunTimeModeNames(newRunTimeModeNames_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setRunTimeModeNames() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setConfigParam")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setConfigParam(
        @FormParam("parm") String parm,
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        String parm_fpar = parm;

        String value_fpar = value;

        try {
        // call static method
            TradeConfig.setConfigParam(parm_fpar, value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setConfigParam() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderProcessingModeNames")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderProcessingModeNames(
        @Context HttpServletResponse servletResponse
    ) {

        String[] response;

        try {
        // call static method
            response = TradeConfig.getOrderProcessingModeNames();
        }
        catch (Throwable t) {
            String msg = "Call to static method getOrderProcessingModeNames() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getWebInterfaceNames")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getWebInterfaceNames(
        @Context HttpServletResponse servletResponse
    ) {

        String[] response;

        try {
        // call static method
            response = TradeConfig.getWebInterfaceNames();
        }
        catch (Throwable t) {
            String msg = "Call to static method getWebInterfaceNames() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getScenarioMixes")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getScenarioMixes(
        @Context HttpServletResponse servletResponse
    ) {

        int[][] response;

        try {
        // call static method
            response = TradeConfig.getScenarioMixes();
        }
        catch (Throwable t) {
            String msg = "Call to static method getScenarioMixes() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // serialize primitive array to string
        String response_obj = SerializationUtil.encode(response, null);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getTrace();
        }
        catch (Throwable t) {
            String msg = "Call to static method getTrace() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setTrace")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setTrace(
        @FormParam("traceValue") String traceValue,
        @Context HttpServletResponse servletResponse
    ) {

        boolean traceValue_fpar = Boolean.parseBoolean(traceValue);

        try {
        // call static method
            TradeConfig.setTrace(traceValue_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setTrace() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getMAX_USERS")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMAX_USERS(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getMAX_USERS();
        }
        catch (Throwable t) {
            String msg = "Call to static method getMAX_USERS() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setMAX_USERS")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMAX_USERS(
        @FormParam("mAX_USERS") String mAX_USERS,
        @Context HttpServletResponse servletResponse
    ) {

        int mAX_USERS_fpar = Integer.parseInt(mAX_USERS);

        try {
        // call static method
            TradeConfig.setMAX_USERS(mAX_USERS_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setMAX_USERS() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getMAX_QUOTES")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMAX_QUOTES(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getMAX_QUOTES();
        }
        catch (Throwable t) {
            String msg = "Call to static method getMAX_QUOTES() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setMAX_QUOTES")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMAX_QUOTES(
        @FormParam("mAX_QUOTES") String mAX_QUOTES,
        @Context HttpServletResponse servletResponse
    ) {

        int mAX_QUOTES_fpar = Integer.parseInt(mAX_QUOTES);

        try {
        // call static method
            TradeConfig.setMAX_QUOTES(mAX_QUOTES_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setMAX_QUOTES() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getMAX_HOLDINGS")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMAX_HOLDINGS(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getMAX_HOLDINGS();
        }
        catch (Throwable t) {
            String msg = "Call to static method getMAX_HOLDINGS() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setMAX_HOLDINGS")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMAX_HOLDINGS(
        @FormParam("mAX_HOLDINGS") String mAX_HOLDINGS,
        @Context HttpServletResponse servletResponse
    ) {

        int mAX_HOLDINGS_fpar = Integer.parseInt(mAX_HOLDINGS);

        try {
        // call static method
            TradeConfig.setMAX_HOLDINGS(mAX_HOLDINGS_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setMAX_HOLDINGS() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getActionTrace")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getActionTrace(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getActionTrace();
        }
        catch (Throwable t) {
            String msg = "Call to static method getActionTrace() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setActionTrace")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setActionTrace(
        @FormParam("actionTrace") String actionTrace,
        @Context HttpServletResponse servletResponse
    ) {

        boolean actionTrace_fpar = Boolean.parseBoolean(actionTrace);

        try {
        // call static method
            TradeConfig.setActionTrace(actionTrace_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setActionTrace() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getScenarioCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getScenarioCount(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getScenarioCount();
        }
        catch (Throwable t) {
            String msg = "Call to static method getScenarioCount() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setScenarioCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setScenarioCount(
        @FormParam("scenarioCount") String scenarioCount,
        @Context HttpServletResponse servletResponse
    ) {

        int scenarioCount_fpar = Integer.parseInt(scenarioCount);

        try {
        // call static method
            TradeConfig.setScenarioCount(scenarioCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setScenarioCount() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/incrementScenarioCount")
    public void incrementScenarioCount(
        @Context HttpServletResponse servletResponse
    ) {

        try {
        // call static method
            TradeConfig.incrementScenarioCount();
        }
        catch (Throwable t) {
            String msg = "Call to static method incrementScenarioCount() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getJDBCDriverNeedsGlobalTransation")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getJDBCDriverNeedsGlobalTransation(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getJDBCDriverNeedsGlobalTransation();
        }
        catch (Throwable t) {
            String msg = "Call to static method getJDBCDriverNeedsGlobalTransation() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setJDBCDriverNeedsGlobalTransation")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setJDBCDriverNeedsGlobalTransation(
        @FormParam("JDBCDriverNeedsGlobalTransationVal") String JDBCDriverNeedsGlobalTransationVal,
        @Context HttpServletResponse servletResponse
    ) {

        boolean JDBCDriverNeedsGlobalTransationVal_fpar = Boolean.parseBoolean(JDBCDriverNeedsGlobalTransationVal);

        try {
        // call static method
            TradeConfig.setJDBCDriverNeedsGlobalTransation(JDBCDriverNeedsGlobalTransationVal_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setJDBCDriverNeedsGlobalTransation() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getUpdateQuotePrices")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getUpdateQuotePrices(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getUpdateQuotePrices();
        }
        catch (Throwable t) {
            String msg = "Call to static method getUpdateQuotePrices() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setUpdateQuotePrices")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setUpdateQuotePrices(
        @FormParam("updateQuotePrices") String updateQuotePrices,
        @Context HttpServletResponse servletResponse
    ) {

        boolean updateQuotePrices_fpar = Boolean.parseBoolean(updateQuotePrices);

        try {
        // call static method
            TradeConfig.setUpdateQuotePrices(updateQuotePrices_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setUpdateQuotePrices() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPrimIterations")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPrimIterations(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getPrimIterations();
        }
        catch (Throwable t) {
            String msg = "Call to static method getPrimIterations() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPrimIterations")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPrimIterations(
        @FormParam("iter") String iter,
        @Context HttpServletResponse servletResponse
    ) {

        int iter_fpar = Integer.parseInt(iter);

        try {
        // call static method
            TradeConfig.setPrimIterations(iter_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setPrimIterations() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getLongRun")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getLongRun(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getLongRun();
        }
        catch (Throwable t) {
            String msg = "Call to static method getLongRun() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setLongRun")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setLongRun(
        @FormParam("longRun") String longRun,
        @Context HttpServletResponse servletResponse
    ) {

        boolean longRun_fpar = Boolean.parseBoolean(longRun);

        try {
        // call static method
            TradeConfig.setLongRun(longRun_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setLongRun() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setPublishQuotePriceChange")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPublishQuotePriceChange(
        @FormParam("publishQuotePriceChange") String publishQuotePriceChange,
        @Context HttpServletResponse servletResponse
    ) {

        boolean publishQuotePriceChange_fpar = Boolean.parseBoolean(publishQuotePriceChange);

        try {
        // call static method
            TradeConfig.setPublishQuotePriceChange(publishQuotePriceChange_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setPublishQuotePriceChange() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPublishQuotePriceChange")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPublishQuotePriceChange(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getPublishQuotePriceChange();
        }
        catch (Throwable t) {
            String msg = "Call to static method getPublishQuotePriceChange() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setMarketSummaryInterval")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMarketSummaryInterval(
        @FormParam("seconds") String seconds,
        @Context HttpServletResponse servletResponse
    ) {

        int seconds_fpar = Integer.parseInt(seconds);

        try {
        // call static method
            TradeConfig.setMarketSummaryInterval(seconds_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setMarketSummaryInterval() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getMarketSummaryInterval")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMarketSummaryInterval(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getMarketSummaryInterval();
        }
        catch (Throwable t) {
            String msg = "Call to static method getMarketSummaryInterval() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setRunTimeMode")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setRunTimeMode(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        int value_fpar = Integer.parseInt(value);

        try {
        // call static method
            TradeConfig.setRunTimeMode(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setRunTimeMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getRunTimeMode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRunTimeMode(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getRunTimeMode();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRunTimeMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderProcessingMode")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderProcessingMode(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        int value_fpar = Integer.parseInt(value);

        try {
        // call static method
            TradeConfig.setOrderProcessingMode(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setOrderProcessingMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderProcessingMode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderProcessingMode(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getOrderProcessingMode();
        }
        catch (Throwable t) {
            String msg = "Call to static method getOrderProcessingMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAccessMode")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAccessMode(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        int value_fpar = Integer.parseInt(value);

        try {
        // call static method
            TradeConfig.setAccessMode(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setAccessMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAccessMode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccessMode(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getAccessMode();
        }
        catch (Throwable t) {
            String msg = "Call to static method getAccessMode() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setWebInterface")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setWebInterface(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        int value_fpar = Integer.parseInt(value);

        try {
        // call static method
            TradeConfig.setWebInterface(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setWebInterface() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getWebInterface")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getWebInterface(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getWebInterface();
        }
        catch (Throwable t) {
            String msg = "Call to static method getWebInterface() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setDisplayOrderAlerts")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setDisplayOrderAlerts(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        boolean value_fpar = Boolean.parseBoolean(value);

        try {
        // call static method
            TradeConfig.setDisplayOrderAlerts(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setDisplayOrderAlerts() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getDisplayOrderAlerts")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getDisplayOrderAlerts(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.getDisplayOrderAlerts();
        }
        catch (Throwable t) {
            String msg = "Call to static method getDisplayOrderAlerts() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPercentSentToWebsocket")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPercentSentToWebsocket(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        int value_fpar = Integer.parseInt(value);

        try {
        // call static method
            TradeConfig.setPercentSentToWebsocket(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setPercentSentToWebsocket() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPercentSentToWebsocket")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPercentSentToWebsocket(
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        try {
        // call static method
            response = TradeConfig.getPercentSentToWebsocket();
        }
        catch (Throwable t) {
            String msg = "Call to static method getPercentSentToWebsocket() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setUseRemoteEJBInterface")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setUseRemoteEJBInterface(
        @FormParam("value") String value,
        @Context HttpServletResponse servletResponse
    ) {

        boolean value_fpar = Boolean.parseBoolean(value);

        try {
        // call static method
            TradeConfig.setUseRemoteEJBInterface(value_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to static method setUseRemoteEJBInterface() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/useRemoteEJBInterface")
    @Produces(MediaType.APPLICATION_JSON)
    public Response useRemoteEJBInterface(
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        try {
        // call static method
            response = TradeConfig.useRemoteEJBInterface();
        }
        catch (Throwable t) {
            String msg = "Call to static method useRemoteEJBInterface() of TradeConfig raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeConfig] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}