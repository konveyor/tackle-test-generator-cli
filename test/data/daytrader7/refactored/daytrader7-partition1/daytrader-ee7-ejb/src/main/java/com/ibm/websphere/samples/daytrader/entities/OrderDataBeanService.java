package com.ibm.websphere.samples.daytrader.entities;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import javax.validation.constraints.NotNull;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for OrderDataBean - Generated by Cardinal
 */

@Path("/OrderDataBeanService")
public class OrderDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(OrderDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[OrderDataBean] getHealth() called");
        return "OrderDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[OrderDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[OrderDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/OrderDataBean_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response OrderDataBean_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        OrderDataBean instOrderDataBean;
        try {
            instOrderDataBean = new OrderDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor OrderDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instOrderDataBean);
        instOrderDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/OrderDataBean_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response OrderDataBean_002(
        @FormParam("orderID") String orderID,
        @FormParam("orderType") String orderType,
        @FormParam("orderStatus") String orderStatus,
        @FormParam("openDate") String openDate,
        @FormParam("completionDate") String completionDate,
        @FormParam("quantity") String quantity,
        @FormParam("price") String price,
        @FormParam("orderFee") String orderFee,
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        String orderType_fpar = orderType;

        String orderStatus_fpar = orderStatus;

        
        // convert reference ID(s) stored in "openDate" to physical/proxy object(s)
        Date openDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(openDate);

        
        // convert reference ID(s) stored in "completionDate" to physical/proxy object(s)
        Date completionDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(completionDate);

        double quantity_fpar = Double.parseDouble(quantity);

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        
        // convert reference ID(s) stored in "orderFee" to physical/proxy object(s)
        BigDecimal orderFee_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(orderFee);

        String symbol_fpar = symbol;

        // call constructor, add created object to cluster object manager, and return ref ID
        OrderDataBean instOrderDataBean;
        try {
            instOrderDataBean = new OrderDataBean(orderID_fpar, orderType_fpar, orderStatus_fpar, openDate_fpar, completionDate_fpar, quantity_fpar, price_fpar, orderFee_fpar, symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor OrderDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instOrderDataBean);
        instOrderDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/OrderDataBean_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response OrderDataBean_003(
        @FormParam("orderType") String orderType,
        @FormParam("orderStatus") String orderStatus,
        @FormParam("openDate") String openDate,
        @FormParam("completionDate") String completionDate,
        @FormParam("quantity") String quantity,
        @FormParam("price") String price,
        @FormParam("orderFee") String orderFee,
        @FormParam("account") String account,
        @FormParam("quote") String quote,
        @FormParam("holding") String holding,
        @Context HttpServletResponse servletResponse
    ) {

        String orderType_fpar = orderType;

        String orderStatus_fpar = orderStatus;

        
        // convert reference ID(s) stored in "openDate" to physical/proxy object(s)
        Date openDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(openDate);

        
        // convert reference ID(s) stored in "completionDate" to physical/proxy object(s)
        Date completionDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(completionDate);

        double quantity_fpar = Double.parseDouble(quantity);

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        
        // convert reference ID(s) stored in "orderFee" to physical/proxy object(s)
        BigDecimal orderFee_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(orderFee);

        
        // convert reference ID(s) stored in "account" to physical/proxy object(s)
        AccountDataBean account_fpar = (AccountDataBean)SerializationUtil.decodeWithDynamicTypeCheck(account);

        
        // convert reference ID(s) stored in "quote" to physical/proxy object(s)
        QuoteDataBean quote_fpar = (QuoteDataBean)SerializationUtil.decodeWithDynamicTypeCheck(quote);

        
        // convert reference ID(s) stored in "holding" to physical/proxy object(s)
        HoldingDataBean holding_fpar = (HoldingDataBean)SerializationUtil.decodeWithDynamicTypeCheck(holding);

        // call constructor, add created object to cluster object manager, and return ref ID
        OrderDataBean instOrderDataBean;
        try {
            instOrderDataBean = new OrderDataBean(orderType_fpar, orderStatus_fpar, openDate_fpar, completionDate_fpar, quantity_fpar, price_fpar, orderFee_fpar, account_fpar, quote_fpar, holding_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor OrderDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instOrderDataBean);
        instOrderDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getRandomInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomInstance(
        @Context HttpServletResponse servletResponse
    ) {

        OrderDataBean response;

        try {
        // call static method
            response = OrderDataBean.getRandomInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomInstance() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toHTML")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toHTML(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.toHTML();
        }
        catch (Throwable t) {
            String msg = "Call to method toHTML() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/print")
    public void print(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.print();
        }
        catch (Throwable t) {
            String msg = "Call to method print() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Integer response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getOrderID();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrderID() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setOrderID(orderID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrderID() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderType")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderType(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getOrderType();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrderType() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderType")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderType(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderType") String orderType,
        @Context HttpServletResponse servletResponse
    ) {

        String orderType_fpar = orderType;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setOrderType(orderType_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrderType() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderStatus")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderStatus(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getOrderStatus();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrderStatus() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderStatus")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderStatus(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderStatus") String orderStatus,
        @Context HttpServletResponse servletResponse
    ) {

        String orderStatus_fpar = orderStatus;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setOrderStatus(orderStatus_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrderStatus() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOpenDate")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOpenDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Date response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getOpenDate();
        }
        catch (Throwable t) {
            String msg = "Call to method getOpenDate() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOpenDate")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOpenDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("openDate") String openDate,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "openDate" to physical/proxy object(s)
        Date openDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(openDate);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setOpenDate(openDate_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOpenDate() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCompletionDate")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCompletionDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Date response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getCompletionDate();
        }
        catch (Throwable t) {
            String msg = "Call to method getCompletionDate() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCompletionDate")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCompletionDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("completionDate") String completionDate,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "completionDate" to physical/proxy object(s)
        Date completionDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(completionDate);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setCompletionDate(completionDate_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCompletionDate() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getQuantity")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuantity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getQuantity();
        }
        catch (Throwable t) {
            String msg = "Call to method getQuantity() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setQuantity")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setQuantity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("quantity") String quantity,
        @Context HttpServletResponse servletResponse
    ) {

        double quantity_fpar = Double.parseDouble(quantity);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setQuantity(quantity_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setQuantity() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPrice")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getPrice();
        }
        catch (Throwable t) {
            String msg = "Call to method getPrice() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPrice")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("price") String price,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setPrice(price_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setPrice() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderFee")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderFee(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getOrderFee();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrderFee() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderFee")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderFee(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderFee") String orderFee,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderFee" to physical/proxy object(s)
        BigDecimal orderFee_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(orderFee);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setOrderFee(orderFee_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrderFee() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getSymbol")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSymbol(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getSymbol();
        }
        catch (Throwable t) {
            String msg = "Call to method getSymbol() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setSymbol")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setSymbol(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setSymbol(symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setSymbol() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAccount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getAccount();
        }
        catch (Throwable t) {
            String msg = "Call to method getAccount() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAccount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("account") String account,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "account" to physical/proxy object(s)
        AccountDataBean account_fpar = (AccountDataBean)SerializationUtil.decodeWithDynamicTypeCheck(account);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setAccount(account_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setAccount() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getQuote")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getQuote();
        }
        catch (Throwable t) {
            String msg = "Call to method getQuote() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setQuote")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("quote") String quote,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "quote" to physical/proxy object(s)
        QuoteDataBean quote_fpar = (QuoteDataBean)SerializationUtil.decodeWithDynamicTypeCheck(quote);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setQuote(quote_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setQuote() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getHolding")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHolding(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        HoldingDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.getHolding();
        }
        catch (Throwable t) {
            String msg = "Call to method getHolding() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setHolding")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setHolding(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holding") String holding,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holding" to physical/proxy object(s)
        HoldingDataBean holding_fpar = (HoldingDataBean)SerializationUtil.decodeWithDynamicTypeCheck(holding);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.setHolding(holding_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setHolding() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/isBuy")
    @Produces(MediaType.APPLICATION_JSON)
    public Response isBuy(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.isBuy();
        }
        catch (Throwable t) {
            String msg = "Call to method isBuy() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/isSell")
    @Produces(MediaType.APPLICATION_JSON)
    public Response isSell(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.isSell();
        }
        catch (Throwable t) {
            String msg = "Call to method isSell() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/isOpen")
    @Produces(MediaType.APPLICATION_JSON)
    public Response isOpen(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.isOpen();
        }
        catch (Throwable t) {
            String msg = "Call to method isOpen() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/isCompleted")
    @Produces(MediaType.APPLICATION_JSON)
    public Response isCompleted(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.isCompleted();
        }
        catch (Throwable t) {
            String msg = "Call to method isCompleted() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/isCancelled")
    @Produces(MediaType.APPLICATION_JSON)
    public Response isCancelled(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.isCancelled();
        }
        catch (Throwable t) {
            String msg = "Call to method isCancelled() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/cancel")
    public void cancel(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instOrderDataBean.cancel();
        }
        catch (Throwable t) {
            String msg = "Call to method cancel() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/hashCode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response hashCode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.hashCode();
        }
        catch (Throwable t) {
            String msg = "Call to method hashCode() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/equals")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response equals(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("object") String object,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "object" to physical/proxy object(s)
        Object object_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(object);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        OrderDataBean instOrderDataBean = (OrderDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instOrderDataBean.equals(object_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method equals() of OrderDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[OrderDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}