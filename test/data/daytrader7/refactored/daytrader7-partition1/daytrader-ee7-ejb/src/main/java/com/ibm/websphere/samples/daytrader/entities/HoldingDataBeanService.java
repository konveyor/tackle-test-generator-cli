package com.ibm.websphere.samples.daytrader.entities;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import javax.validation.constraints.NotNull;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for HoldingDataBean - Generated by Cardinal
 */

@Path("/HoldingDataBeanService")
public class HoldingDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(HoldingDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[HoldingDataBean] getHealth() called");
        return "HoldingDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[HoldingDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[HoldingDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/HoldingDataBean_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response HoldingDataBean_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        HoldingDataBean instHoldingDataBean;
        try {
            instHoldingDataBean = new HoldingDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor HoldingDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instHoldingDataBean);
        instHoldingDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/HoldingDataBean_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response HoldingDataBean_002(
        @FormParam("holdingID") String holdingID,
        @FormParam("quantity") String quantity,
        @FormParam("purchasePrice") String purchasePrice,
        @FormParam("purchaseDate") String purchaseDate,
        @FormParam("quoteID") String quoteID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        double quantity_fpar = Double.parseDouble(quantity);

        
        // convert reference ID(s) stored in "purchasePrice" to physical/proxy object(s)
        BigDecimal purchasePrice_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(purchasePrice);

        
        // convert reference ID(s) stored in "purchaseDate" to physical/proxy object(s)
        Date purchaseDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(purchaseDate);

        String quoteID_fpar = quoteID;

        // call constructor, add created object to cluster object manager, and return ref ID
        HoldingDataBean instHoldingDataBean;
        try {
            instHoldingDataBean = new HoldingDataBean(holdingID_fpar, quantity_fpar, purchasePrice_fpar, purchaseDate_fpar, quoteID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor HoldingDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instHoldingDataBean);
        instHoldingDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/HoldingDataBean_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response HoldingDataBean_003(
        @FormParam("quantity") String quantity,
        @FormParam("purchasePrice") String purchasePrice,
        @FormParam("purchaseDate") String purchaseDate,
        @FormParam("account") String account,
        @FormParam("quote") String quote,
        @Context HttpServletResponse servletResponse
    ) {

        double quantity_fpar = Double.parseDouble(quantity);

        
        // convert reference ID(s) stored in "purchasePrice" to physical/proxy object(s)
        BigDecimal purchasePrice_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(purchasePrice);

        
        // convert reference ID(s) stored in "purchaseDate" to physical/proxy object(s)
        Date purchaseDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(purchaseDate);

        
        // convert reference ID(s) stored in "account" to physical/proxy object(s)
        AccountDataBean account_fpar = (AccountDataBean)SerializationUtil.decodeWithDynamicTypeCheck(account);

        
        // convert reference ID(s) stored in "quote" to physical/proxy object(s)
        QuoteDataBean quote_fpar = (QuoteDataBean)SerializationUtil.decodeWithDynamicTypeCheck(quote);

        // call constructor, add created object to cluster object manager, and return ref ID
        HoldingDataBean instHoldingDataBean;
        try {
            instHoldingDataBean = new HoldingDataBean(quantity_fpar, purchasePrice_fpar, purchaseDate_fpar, account_fpar, quote_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor HoldingDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instHoldingDataBean);
        instHoldingDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getRandomInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomInstance(
        @Context HttpServletResponse servletResponse
    ) {

        HoldingDataBean response;

        try {
        // call static method
            response = HoldingDataBean.getRandomInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomInstance() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toHTML")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toHTML(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.toHTML();
        }
        catch (Throwable t) {
            String msg = "Call to method toHTML() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/print")
    public void print(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.print();
        }
        catch (Throwable t) {
            String msg = "Call to method print() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getHoldingID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHoldingID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Integer response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getHoldingID();
        }
        catch (Throwable t) {
            String msg = "Call to method getHoldingID() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setHoldingID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setHoldingID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holdingID") String holdingID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setHoldingID(holdingID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setHoldingID() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getQuantity")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuantity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getQuantity();
        }
        catch (Throwable t) {
            String msg = "Call to method getQuantity() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setQuantity")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setQuantity(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("quantity") String quantity,
        @Context HttpServletResponse servletResponse
    ) {

        double quantity_fpar = Double.parseDouble(quantity);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setQuantity(quantity_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setQuantity() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPurchasePrice")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPurchasePrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        BigDecimal response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getPurchasePrice();
        }
        catch (Throwable t) {
            String msg = "Call to method getPurchasePrice() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPurchasePrice")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPurchasePrice(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("purchasePrice") String purchasePrice,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "purchasePrice" to physical/proxy object(s)
        BigDecimal purchasePrice_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(purchasePrice);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setPurchasePrice(purchasePrice_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setPurchasePrice() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPurchaseDate")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPurchaseDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Date response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getPurchaseDate();
        }
        catch (Throwable t) {
            String msg = "Call to method getPurchaseDate() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPurchaseDate")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPurchaseDate(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("purchaseDate") String purchaseDate,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "purchaseDate" to physical/proxy object(s)
        Date purchaseDate_fpar = (Date)SerializationUtil.decodeWithDynamicTypeCheck(purchaseDate);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setPurchaseDate(purchaseDate_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setPurchaseDate() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getQuoteID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuoteID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getQuoteID();
        }
        catch (Throwable t) {
            String msg = "Call to method getQuoteID() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setQuoteID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setQuoteID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("quoteID") String quoteID,
        @Context HttpServletResponse servletResponse
    ) {

        String quoteID_fpar = quoteID;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setQuoteID(quoteID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setQuoteID() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAccount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getAccount();
        }
        catch (Throwable t) {
            String msg = "Call to method getAccount() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAccount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("account") String account,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "account" to physical/proxy object(s)
        AccountDataBean account_fpar = (AccountDataBean)SerializationUtil.decodeWithDynamicTypeCheck(account);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setAccount(account_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setAccount() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getQuote")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.getQuote();
        }
        catch (Throwable t) {
            String msg = "Call to method getQuote() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setQuote")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("quote") String quote,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "quote" to physical/proxy object(s)
        QuoteDataBean quote_fpar = (QuoteDataBean)SerializationUtil.decodeWithDynamicTypeCheck(quote);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instHoldingDataBean.setQuote(quote_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setQuote() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/hashCode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response hashCode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.hashCode();
        }
        catch (Throwable t) {
            String msg = "Call to method hashCode() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/equals")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response equals(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("object") String object,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "object" to physical/proxy object(s)
        Object object_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(object);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        HoldingDataBean instHoldingDataBean = (HoldingDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instHoldingDataBean.equals(object_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method equals() of HoldingDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[HoldingDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}