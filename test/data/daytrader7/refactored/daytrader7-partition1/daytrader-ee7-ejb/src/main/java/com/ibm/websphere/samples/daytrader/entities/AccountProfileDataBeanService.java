package com.ibm.websphere.samples.daytrader.entities;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import javax.validation.constraints.NotNull;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for AccountProfileDataBean - Generated by Cardinal
 */

@Path("/AccountProfileDataBeanService")
public class AccountProfileDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(AccountProfileDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[AccountProfileDataBean] getHealth() called");
        return "AccountProfileDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[AccountProfileDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[AccountProfileDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/AccountProfileDataBean_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response AccountProfileDataBean_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        AccountProfileDataBean instAccountProfileDataBean;
        try {
            instAccountProfileDataBean = new AccountProfileDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor AccountProfileDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instAccountProfileDataBean);
        instAccountProfileDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/AccountProfileDataBean_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response AccountProfileDataBean_002(
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @FormParam("fullName") String fullName,
        @FormParam("address") String address,
        @FormParam("email") String email,
        @FormParam("creditCard") String creditCard,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        String fullName_fpar = fullName;

        String address_fpar = address;

        String email_fpar = email;

        String creditCard_fpar = creditCard;

        // call constructor, add created object to cluster object manager, and return ref ID
        AccountProfileDataBean instAccountProfileDataBean;
        try {
            instAccountProfileDataBean = new AccountProfileDataBean(userID_fpar, password_fpar, fullName_fpar, address_fpar, email_fpar, creditCard_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor AccountProfileDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instAccountProfileDataBean);
        instAccountProfileDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getRandomInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getRandomInstance(
        @Context HttpServletResponse servletResponse
    ) {

        AccountProfileDataBean response;

        try {
        // call static method
            response = AccountProfileDataBean.getRandomInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getRandomInstance() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/toHTML")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toHTML(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.toHTML();
        }
        catch (Throwable t) {
            String msg = "Call to method toHTML() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/print")
    public void print(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.print();
        }
        catch (Throwable t) {
            String msg = "Call to method print() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getUserID")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getUserID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getUserID();
        }
        catch (Throwable t) {
            String msg = "Call to method getUserID() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setUserID")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setUserID(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setUserID(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setUserID() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getPassword")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getPassword(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getPassword();
        }
        catch (Throwable t) {
            String msg = "Call to method getPassword() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setPassword")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setPassword(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("password") String password,
        @Context HttpServletResponse servletResponse
    ) {

        String password_fpar = password;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setPassword(password_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setPassword() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getFullName")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getFullName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getFullName();
        }
        catch (Throwable t) {
            String msg = "Call to method getFullName() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setFullName")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setFullName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("fullName") String fullName,
        @Context HttpServletResponse servletResponse
    ) {

        String fullName_fpar = fullName;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setFullName(fullName_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setFullName() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAddress")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAddress(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getAddress();
        }
        catch (Throwable t) {
            String msg = "Call to method getAddress() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAddress")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAddress(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("address") String address,
        @Context HttpServletResponse servletResponse
    ) {

        String address_fpar = address;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setAddress(address_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setAddress() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getEmail")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmail(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getEmail();
        }
        catch (Throwable t) {
            String msg = "Call to method getEmail() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setEmail")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setEmail(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("email") String email,
        @Context HttpServletResponse servletResponse
    ) {

        String email_fpar = email;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setEmail(email_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setEmail() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCreditCard")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCreditCard(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getCreditCard();
        }
        catch (Throwable t) {
            String msg = "Call to method getCreditCard() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCreditCard")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCreditCard(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("creditCard") String creditCard,
        @Context HttpServletResponse servletResponse
    ) {

        String creditCard_fpar = creditCard;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setCreditCard(creditCard_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCreditCard() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getAccount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.getAccount();
        }
        catch (Throwable t) {
            String msg = "Call to method getAccount() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setAccount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setAccount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("account") String account,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "account" to physical/proxy object(s)
        AccountDataBean account_fpar = (AccountDataBean)SerializationUtil.decodeWithDynamicTypeCheck(account);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instAccountProfileDataBean.setAccount(account_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setAccount() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/hashCode")
    @Produces(MediaType.APPLICATION_JSON)
    public Response hashCode(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.hashCode();
        }
        catch (Throwable t) {
            String msg = "Call to method hashCode() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/equals")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response equals(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("object") String object,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "object" to physical/proxy object(s)
        Object object_fpar = (Object)SerializationUtil.decodeWithDynamicTypeCheck(object);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        AccountProfileDataBean instAccountProfileDataBean = (AccountProfileDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instAccountProfileDataBean.equals(object_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method equals() of AccountProfileDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[AccountProfileDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}