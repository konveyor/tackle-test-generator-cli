package com.ibm.websphere.samples.daytrader.direct;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Collection;
import javax.enterprise.concurrent.ManagedThreadFactory;
import javax.jms.ConnectionFactory;
import javax.jms.JMSContext;
import javax.jms.JMSException;
import javax.jms.Queue;
import javax.jms.TextMessage;
import javax.jms.Topic;
import javax.naming.InitialContext;
import javax.sql.DataSource;
import javax.transaction.UserTransaction;
import com.ibm.websphere.samples.daytrader.TradeAction;
import com.ibm.websphere.samples.daytrader.TradeServices;
import com.ibm.websphere.samples.daytrader.beans.MarketSummaryDataBean;
import com.ibm.websphere.samples.daytrader.beans.RunStatsDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountDataBean;
import com.ibm.websphere.samples.daytrader.entities.AccountProfileDataBean;
import com.ibm.websphere.samples.daytrader.entities.HoldingDataBean;
import com.ibm.websphere.samples.daytrader.entities.OrderDataBean;
import com.ibm.websphere.samples.daytrader.entities.QuoteDataBean;
import com.ibm.websphere.samples.daytrader.util.CompleteOrderThread;
import com.ibm.websphere.samples.daytrader.util.FinancialUtils;
import com.ibm.websphere.samples.daytrader.util.Log;
import com.ibm.websphere.samples.daytrader.util.MDBStats;
import com.ibm.websphere.samples.daytrader.util.TradeConfig;

/**
 * Service class for TradeDirect - Generated by Cardinal
 */

@Path("/TradeDirectService")
public class TradeDirectService {
    private static final Logger logger = CardinalLogger.getLogger(TradeDirectService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[TradeDirect] getHealth() called");
        return "TradeDirectService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeDirectService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TradeDirect] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/TradeDirect_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response TradeDirect_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        TradeDirect instTradeDirect;
        try {
            instTradeDirect = new TradeDirect();
        }
        catch (Throwable t) {
            String msg = "Call to constructor TradeDirect() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instTradeDirect);
        instTradeDirect.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/TradeDirect_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response TradeDirect_002(
        @FormParam("inSession") String inSession,
        @Context HttpServletResponse servletResponse
    ) {

        boolean inSession_fpar = Boolean.parseBoolean(inSession);

        // call constructor, add created object to cluster object manager, and return ref ID
        TradeDirect instTradeDirect;
        try {
            instTradeDirect = new TradeDirect(inSession_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to constructor TradeDirect() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instTradeDirect);
        instTradeDirect.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getMarketSummary")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMarketSummary(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        MarketSummaryDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getMarketSummary();
        }
        catch (Throwable t) {
            String msg = "Call to method getMarketSummary() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/buy")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response buy(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("symbol") String symbol,
        @FormParam("quantity") String quantity,
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String symbol_fpar = symbol;

        double quantity_fpar = Double.parseDouble(quantity);

        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.buy(userID_fpar, symbol_fpar, quantity_fpar, orderProcessingMode_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method buy() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/sell")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response sell(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("holdingID") String holdingID,
        @FormParam("orderProcessingMode") String orderProcessingMode,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        int orderProcessingMode_fpar = Integer.parseInt(orderProcessingMode);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.sell(userID_fpar, holdingID_fpar, orderProcessingMode_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method sell() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/queueOrder")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void queueOrder(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeDirect.queueOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method queueOrder() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/completeOrder_003")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response completeOrder_003(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        OrderDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.completeOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method completeOrder() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/cancelOrder_005")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void cancelOrder_005(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderID") String orderID,
        @FormParam("twoPhase") String twoPhase,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        boolean twoPhase_fpar = Boolean.parseBoolean(twoPhase);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeDirect.cancelOrder(orderID_fpar, twoPhase_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method cancelOrder() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/orderCompleted")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void orderCompleted(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("orderID") String orderID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        
        // convert reference ID(s) stored in "orderID" to physical/proxy object(s)
        Integer orderID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(orderID);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeDirect.orderCompleted(userID_fpar, orderID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method orderCompleted() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrders")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<OrderDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getOrders(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getOrders() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getClosedOrders")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getClosedOrders(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<OrderDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getClosedOrders(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getClosedOrders() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/createQuote")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response createQuote(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @FormParam("companyName") String companyName,
        @FormParam("price") String price,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        String companyName_fpar = companyName;

        
        // convert reference ID(s) stored in "price" to physical/proxy object(s)
        BigDecimal price_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(price);

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.createQuote(symbol_fpar, companyName_fpar, price_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method createQuote() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getQuote_007")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getQuote_007(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getQuote(symbol_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getQuote() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAllQuotes")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAllQuotes(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Collection<QuoteDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getAllQuotes();
        }
        catch (Throwable t) {
            String msg = "Call to method getAllQuotes() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getHoldings")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHoldings(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        Collection<HoldingDataBean> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getHoldings(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getHoldings() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getHolding")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHolding(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holdingID") String holdingID,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "holdingID" to physical/proxy object(s)
        Integer holdingID_fpar = (Integer)SerializationUtil.decodeWithDynamicTypeCheck(holdingID);

        HoldingDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getHolding(holdingID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getHolding() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAccountData_009")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountData_009(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getAccountData(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountData() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAccountData_0011")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountData_0011(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("accountID") String accountID,
        @Context HttpServletResponse servletResponse
    ) {

        int accountID_fpar = Integer.parseInt(accountID);

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getAccountData(accountID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountData() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAccountProfileData_0015")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAccountProfileData_0015(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        AccountProfileDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getAccountProfileData(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method getAccountProfileData() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/updateAccountProfile_0018")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateAccountProfile_0018(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("profileData") String profileData,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "profileData" to physical/proxy object(s)
        AccountProfileDataBean profileData_fpar = (AccountProfileDataBean)SerializationUtil.decodeWithDynamicTypeCheck(profileData);

        AccountProfileDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.updateAccountProfile(profileData_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method updateAccountProfile() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/updateQuotePriceVolume_0020")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateQuotePriceVolume_0020(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @FormParam("changeFactor") String changeFactor,
        @FormParam("sharesTraded") String sharesTraded,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        
        // convert reference ID(s) stored in "changeFactor" to physical/proxy object(s)
        BigDecimal changeFactor_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(changeFactor);

        double sharesTraded_fpar = Double.parseDouble(sharesTraded);

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.updateQuotePriceVolume(symbol_fpar, changeFactor_fpar, sharesTraded_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method updateQuotePriceVolume() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/updateQuotePriceVolumeInt")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response updateQuotePriceVolumeInt(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("symbol") String symbol,
        @FormParam("changeFactor") String changeFactor,
        @FormParam("sharesTraded") String sharesTraded,
        @FormParam("publishQuotePriceChange") String publishQuotePriceChange,
        @Context HttpServletResponse servletResponse
    ) {

        String symbol_fpar = symbol;

        
        // convert reference ID(s) stored in "changeFactor" to physical/proxy object(s)
        BigDecimal changeFactor_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(changeFactor);

        double sharesTraded_fpar = Double.parseDouble(sharesTraded);

        boolean publishQuotePriceChange_fpar = Boolean.parseBoolean(publishQuotePriceChange);

        QuoteDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.updateQuotePriceVolumeInt(symbol_fpar, changeFactor_fpar, sharesTraded_fpar, publishQuotePriceChange_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method updateQuotePriceVolumeInt() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/login")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response login(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.login(userID_fpar, password_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method login() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/logout")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void logout(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTradeDirect.logout(userID_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method logout() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/register")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response register(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("userID") String userID,
        @FormParam("password") String password,
        @FormParam("fullname") String fullname,
        @FormParam("address") String address,
        @FormParam("email") String email,
        @FormParam("creditcard") String creditcard,
        @FormParam("openBalance") String openBalance,
        @Context HttpServletResponse servletResponse
    ) {

        String userID_fpar = userID;

        String password_fpar = password;

        String fullname_fpar = fullname;

        String address_fpar = address;

        String email_fpar = email;

        String creditcard_fpar = creditcard;

        
        // convert reference ID(s) stored in "openBalance" to physical/proxy object(s)
        BigDecimal openBalance_fpar = (BigDecimal)SerializationUtil.decodeWithDynamicTypeCheck(openBalance);

        AccountDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.register(userID_fpar, password_fpar, fullname_fpar, address_fpar, email_fpar, creditcard_fpar, openBalance_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method register() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/checkDBProductName")
    @Produces(MediaType.APPLICATION_JSON)
    public Response checkDBProductName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.checkDBProductName();
        }
        catch (Throwable t) {
            String msg = "Call to method checkDBProductName() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/recreateDBTables")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response recreateDBTables(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("sqlBuffer") String sqlBuffer,
        @FormParam("out") String out,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "sqlBuffer" to physical/proxy object(s)
        Object [] sqlBuffer_fpar = (Object [])SerializationUtil.decodeWithDynamicTypeCheck(sqlBuffer);

        
        // convert reference ID(s) stored in "out" to physical/proxy object(s)
        java.io.PrintWriter out_fpar = (java.io.PrintWriter)SerializationUtil.decodeWithDynamicTypeCheck(out);

        boolean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.recreateDBTables(sqlBuffer_fpar, out_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method recreateDBTables() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/resetTrade")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response resetTrade(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("deleteAll") String deleteAll,
        @Context HttpServletResponse servletResponse
    ) {

        boolean deleteAll_fpar = Boolean.parseBoolean(deleteAll);

        RunStatsDataBean response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.resetTrade(deleteAll_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method resetTrade() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getConnPublic")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getConnPublic(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        Connection response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TradeDirect instTradeDirect = (TradeDirect)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTradeDirect.getConnPublic();
        }
        catch (Throwable t) {
            String msg = "Call to method getConnPublic() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[TradeDirect] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/init")
    public void init(
        @Context HttpServletResponse servletResponse
    ) {

        try {
        // call static method
            TradeDirect.init();
        }
        catch (Throwable t) {
            String msg = "Call to static method init() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/destroy")
    public void destroy(
        @Context HttpServletResponse servletResponse
    ) {

        try {
        // call static method
            TradeDirect.destroy();
        }
        catch (Throwable t) {
            String msg = "Call to static method destroy() of TradeDirect raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}