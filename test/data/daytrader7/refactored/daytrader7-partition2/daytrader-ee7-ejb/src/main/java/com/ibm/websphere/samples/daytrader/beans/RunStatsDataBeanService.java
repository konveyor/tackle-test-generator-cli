package com.ibm.websphere.samples.daytrader.beans;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.io.Serializable;

/**
 * Service class for RunStatsDataBean - Generated by Cardinal
 */

@Path("/RunStatsDataBeanService")
public class RunStatsDataBeanService {
    private static final Logger logger = CardinalLogger.getLogger(RunStatsDataBeanService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[RunStatsDataBean] getHealth() called");
        return "RunStatsDataBeanService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[RunStatsDataBeanService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[RunStatsDataBean] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/RunStatsDataBean")
    @Produces(MediaType.APPLICATION_JSON)
    public Response RunStatsDataBean(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        RunStatsDataBean instRunStatsDataBean;
        try {
            instRunStatsDataBean = new RunStatsDataBean();
        }
        catch (Throwable t) {
            String msg = "Call to constructor RunStatsDataBean() raised exception: "+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instRunStatsDataBean);
        instRunStatsDataBean.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/toString")
    @Produces(MediaType.APPLICATION_JSON)
    public Response toString(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.toString();
        }
        catch (Throwable t) {
            String msg = "Call to method toString() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getTradeUserCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getTradeUserCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getTradeUserCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getTradeUserCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setTradeUserCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setTradeUserCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("tradeUserCount") String tradeUserCount,
        @Context HttpServletResponse servletResponse
    ) {

        int tradeUserCount_fpar = Integer.parseInt(tradeUserCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setTradeUserCount(tradeUserCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setTradeUserCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getNewUserCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getNewUserCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getNewUserCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getNewUserCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setNewUserCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setNewUserCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("newUserCount") String newUserCount,
        @Context HttpServletResponse servletResponse
    ) {

        int newUserCount_fpar = Integer.parseInt(newUserCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setNewUserCount(newUserCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setNewUserCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getSumLoginCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSumLoginCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getSumLoginCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getSumLoginCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setSumLoginCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setSumLoginCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("sumLoginCount") String sumLoginCount,
        @Context HttpServletResponse servletResponse
    ) {

        int sumLoginCount_fpar = Integer.parseInt(sumLoginCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setSumLoginCount(sumLoginCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setSumLoginCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getSumLogoutCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSumLogoutCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getSumLogoutCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getSumLogoutCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setSumLogoutCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setSumLogoutCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("sumLogoutCount") String sumLogoutCount,
        @Context HttpServletResponse servletResponse
    ) {

        int sumLogoutCount_fpar = Integer.parseInt(sumLogoutCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setSumLogoutCount(sumLogoutCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setSumLogoutCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getHoldingCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getHoldingCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getHoldingCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getHoldingCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setHoldingCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setHoldingCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("holdingCount") String holdingCount,
        @Context HttpServletResponse servletResponse
    ) {

        int holdingCount_fpar = Integer.parseInt(holdingCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setHoldingCount(holdingCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setHoldingCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getBuyOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getBuyOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getBuyOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getBuyOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setBuyOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setBuyOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("buyOrderCount") String buyOrderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int buyOrderCount_fpar = Integer.parseInt(buyOrderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setBuyOrderCount(buyOrderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setBuyOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getSellOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getSellOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getSellOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getSellOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setSellOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setSellOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("sellOrderCount") String sellOrderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int sellOrderCount_fpar = Integer.parseInt(sellOrderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setSellOrderCount(sellOrderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setSellOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getCancelledOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCancelledOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getCancelledOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getCancelledOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCancelledOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCancelledOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("cancelledOrderCount") String cancelledOrderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int cancelledOrderCount_fpar = Integer.parseInt(cancelledOrderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setCancelledOrderCount(cancelledOrderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCancelledOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOpenOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOpenOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getOpenOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getOpenOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOpenOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOpenOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("openOrderCount") String openOrderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int openOrderCount_fpar = Integer.parseInt(openOrderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setOpenOrderCount(openOrderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOpenOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getDeletedOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getDeletedOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getDeletedOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getDeletedOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setDeletedOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setDeletedOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("deletedOrderCount") String deletedOrderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int deletedOrderCount_fpar = Integer.parseInt(deletedOrderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setDeletedOrderCount(deletedOrderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setDeletedOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getOrderCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getOrderCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setOrderCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setOrderCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("orderCount") String orderCount,
        @Context HttpServletResponse servletResponse
    ) {

        int orderCount_fpar = Integer.parseInt(orderCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setOrderCount(orderCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setOrderCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getTradeStockCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getTradeStockCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instRunStatsDataBean.getTradeStockCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getTradeStockCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[RunStatsDataBean] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setTradeStockCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setTradeStockCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("tradeStockCount") String tradeStockCount,
        @Context HttpServletResponse servletResponse
    ) {

        int tradeStockCount_fpar = Integer.parseInt(tradeStockCount);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        RunStatsDataBean instRunStatsDataBean = (RunStatsDataBean)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instRunStatsDataBean.setTradeStockCount(tradeStockCount_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setTradeStockCount() of RunStatsDataBean raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}