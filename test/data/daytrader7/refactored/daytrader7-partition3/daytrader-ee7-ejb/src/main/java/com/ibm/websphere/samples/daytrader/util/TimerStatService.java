package com.ibm.websphere.samples.daytrader.util;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;

/**
 * Service class for TimerStat - Generated by Cardinal
 */

@Path("/TimerStatService")
public class TimerStatService {
    private static final Logger logger = CardinalLogger.getLogger(TimerStatService.class);

    // default constructor service
    @POST
    @Path("/TimerStat_default_ctor")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response TimerStat_default_ctor() {
        TimerStat instTimerStat = new TimerStat();
        String refid = ClusterObjectManager.putObject(instTimerStat);
        instTimerStat.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        logger.info("[TimerStatService] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[TimerStat] getHealth() called");
        return "TimerStatService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TimerStatService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[TimerStat] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/getCount")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getCount();
        }
        catch (Throwable t) {
            String msg = "Call to method getCount() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getMax")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMax(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getMax();
        }
        catch (Throwable t) {
            String msg = "Call to method getMax() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getMin")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMin(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getMin();
        }
        catch (Throwable t) {
            String msg = "Call to method getMin() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setCount(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("count") String count,
        @Context HttpServletResponse servletResponse
    ) {

        int count_fpar = Integer.parseInt(count);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTimerStat.setCount(count_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setCount() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setMax")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMax(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("max") String max,
        @Context HttpServletResponse servletResponse
    ) {

        double max_fpar = Double.parseDouble(max);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTimerStat.setMax(max_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setMax() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setMin")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setMin(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("min") String min,
        @Context HttpServletResponse servletResponse
    ) {

        double min_fpar = Double.parseDouble(min);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTimerStat.setMin(min_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setMin() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getTotalTime")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getTotalTime(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getTotalTime();
        }
        catch (Throwable t) {
            String msg = "Call to method getTotalTime() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setTotalTime")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setTotalTime(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("totalTime") String totalTime,
        @Context HttpServletResponse servletResponse
    ) {

        double totalTime_fpar = Double.parseDouble(totalTime);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instTimerStat.setTotalTime(totalTime_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method setTotalTime() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getMaxSecs")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMaxSecs(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getMaxSecs();
        }
        catch (Throwable t) {
            String msg = "Call to method getMaxSecs() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getMinSecs")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getMinSecs(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getMinSecs();
        }
        catch (Throwable t) {
            String msg = "Call to method getMinSecs() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/getAvgSecs")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getAvgSecs(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        double response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        TimerStat instTimerStat = (TimerStat)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instTimerStat.getAvgSecs();
        }
        catch (Throwable t) {
            String msg = "Call to method getAvgSecs() of TimerStat raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        logger.info("[TimerStat] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

}