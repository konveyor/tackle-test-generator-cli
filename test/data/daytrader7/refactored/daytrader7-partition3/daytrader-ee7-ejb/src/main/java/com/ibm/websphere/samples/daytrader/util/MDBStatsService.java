package com.ibm.websphere.samples.daytrader.util;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;

/**
 * Service class for MDBStats - Generated by Cardinal
 */

@Path("/MDBStatsService")
public class MDBStatsService {
    private static final Logger logger = CardinalLogger.getLogger(MDBStatsService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        logger.info("[MDBStats] getHealth() called");
        return "MDBStatsService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[MDBStatsService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        logger.info("[MDBStats] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }





    @POST
    @Path("/getInstance")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getInstance(
        @Context HttpServletResponse servletResponse
    ) {

        MDBStats response;

        try {
        // call static method
            response = MDBStats.getInstance();
        }
        catch (Throwable t) {
            String msg = "Call to static method getInstance() of MDBStats raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[MDBStats] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/addTiming")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response addTiming(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("type") String type,
        @FormParam("sendTime") String sendTime,
        @FormParam("recvTime") String recvTime,
        @Context HttpServletResponse servletResponse
    ) {

        String type_fpar = type;

        long sendTime_fpar = Long.parseLong(sendTime);

        long recvTime_fpar = Long.parseLong(recvTime);

        TimerStat response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        MDBStats instMDBStats = (MDBStats)ClusterObjectManager.getObject(klu__referenceID);
        try {
            response = instMDBStats.addTiming(type_fpar, sendTime_fpar, recvTime_fpar);
        }
        catch (Throwable t) {
            String msg = "Call to method addTiming() of MDBStats raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        logger.info("[MDBStats] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/reset")
    public void reset(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        MDBStats instMDBStats = (MDBStats)ClusterObjectManager.getObject(klu__referenceID);
        try {
            instMDBStats.reset();
        }
        catch (Throwable t) {
            String msg = "Call to method reset() of MDBStats raised exception"+t.getMessage();
            logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}