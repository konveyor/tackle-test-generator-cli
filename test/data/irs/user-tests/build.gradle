
plugins {
    id 'application'
    id 'java'
    id 'jacoco'
}

tasks.withType(Zip).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(Tar).all {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    mavenCentral()
}

configurations {
    jacocoInstrumentation
}
dependencies {

jacocoInstrumentation group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.7', classifier: 'nodeps'

//dependencies from class files:

  implementation files('../lib/commons-logging-1.1.2.jar')
  implementation files('../lib/javax.annotation-api-1.3.2.jar')
  implementation files('../lib/javax.json-api-1.0.jar')
  implementation files('../lib/javax.servlet-api-3.1.0.jar')
  implementation files('../lib/javax.ws.rs-api-2.0.jar')
  implementation files('../lib/resteasy-client-3.0.8.Final.jar')
  implementation files('../lib/resteasy-jaxrs-3.0.8.Final.jar')
  implementation files('../../../../tkltest-lib/acts_3.2.jar')
  implementation files('../../../../tkltest-lib/args4j-2.0.28.jar')
  implementation files('../../../../tkltest-lib/asm-7.1.jar')
  implementation files('../../../../tkltest-lib/asm-analysis-7.1.jar')
  implementation files('../../../../tkltest-lib/asm-commons-7.1.jar')
  implementation files('../../../../tkltest-lib/asm-tree-7.1.jar')
  implementation files('../../../../tkltest-lib/asm-util-7.1.jar')
  implementation files('../../../../tkltest-lib/axml-2.0.0.jar')
  implementation files('../../../../tkltest-lib/checker-qual-2.11.1.jar')
  implementation files('../../../../tkltest-lib/commons-cli-1.4.jar')
  implementation files('../../../../tkltest-lib/commons-codec-1.11.jar')
  implementation files('../../../../tkltest-lib/commons-io-2.6.jar')
  implementation files('../../../../tkltest-lib/commons-logging-1.2.jar')
  implementation files('../../../../tkltest-lib/dexlib2-2.4.0.jar')
  implementation files('../../../../tkltest-lib/error_prone_annotations-2.3.4.jar')
  implementation files('../../../../tkltest-lib/failureaccess-1.0.1.jar')
  implementation files('../../../../tkltest-lib/FastInfoset-1.2.15.jar')
  implementation files('../../../../tkltest-lib/functionaljava-4.2.jar')
  implementation files('../../../../tkltest-lib/guava-29.0-jre.jar')
  implementation files('../../../../tkltest-lib/hamcrest-all-1.3.jar')
  implementation files('../../../../tkltest-lib/hamcrest-core-1.3.jar')
  implementation files('../../../../tkltest-lib/heros-1.2.0.jar')
  implementation files('../../../../tkltest-lib/httpclient-4.5.13.jar')
  implementation files('../../../../tkltest-lib/httpcore-4.4.6.jar')
  implementation files('../../../../tkltest-lib/istack-commons-runtime-3.0.7.jar')
  implementation files('../../../../tkltest-lib/j2objc-annotations-1.3.jar')
  implementation files('../../../../tkltest-lib/jackson-annotations-2.12.5.jar')
  implementation files('../../../../tkltest-lib/jackson-core-2.12.5.jar')
  implementation files('../../../../tkltest-lib/jackson-databind-2.12.5.jar')
  implementation files('../../../../tkltest-lib/jasmin-3.0.2.jar')
  implementation files('../../../../tkltest-lib/javaparser-core-3.16.1.jar')
  implementation files('../../../../tkltest-lib/javaparser-symbol-solver-core-3.16.1.jar')
  implementation files('../../../../tkltest-lib/javassist-3.27.0-GA.jar')
  implementation files('../../../../tkltest-lib/javax.activation-api-1.2.0.jar')
  implementation files('../../../../tkltest-lib/javax.annotation-api-1.3.2.jar')
  implementation files('../../../../tkltest-lib/javax.json-1.0.4.jar')
  implementation files('../../../../tkltest-lib/java_cup-0.9.2.jar')
  implementation files('../../../../tkltest-lib/jaxb-api-2.4.0-b180725.0427.jar')
  implementation files('../../../../tkltest-lib/jaxb-runtime-2.4.0-b180830.0438.jar')
  implementation files('../../../../tkltest-lib/jsr305-1.3.9.jar')
  implementation files('../../../../tkltest-lib/junit-4.13.1.jar')
  implementation files('../../../../tkltest-lib/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar')
  implementation files('../../../../tkltest-lib/org.jacoco.agent-0.8.7.jar')
  implementation files('../../../../tkltest-lib/org.jacoco.ant-0.8.7-nodeps.jar')
  implementation files('../../../../tkltest-lib/org.jacoco.cli-0.8.7-nodeps.jar')
  implementation files('../../../../tkltest-lib/org.jacoco.core-0.8.7.jar')
  implementation files('../../../../tkltest-lib/org.jacoco.report-0.8.7.jar')
  implementation files('../../../../tkltest-lib/polyglot-2006.jar')
  implementation files('../../../../tkltest-lib/randoop-all-4.3.0.jar')
  implementation files('../../../../tkltest-lib/replacecall-4.3.0.jar')
  implementation files('../../../../tkltest-lib/slf4j-api-1.7.5.jar')
  implementation files('../../../../tkltest-lib/soot-4.1.0.jar')
  implementation files('../../../../tkltest-lib/stax-ex-1.8.jar')
  implementation files('../../../../tkltest-lib/tackle-test-generator-core-1.0.0-SNAPSHOT.jar')
  implementation files('../../../../tkltest-lib/txw2-2.4.0-b180830.0438.jar')
  implementation files('../../../../tkltest-lib/xmlpull-1.1.3.4d_b4_min.jar')
//we compile only the test files, so during compilation time, we add dependencies to the app class path:

    testCompileOnly files('../monolith/target/classes')
//when running the tests, we use the app classes, can be instrumented/not-instrumented classes

    testRuntimeOnly files('../monolith/target/classes')
}

task cleanUnitReportDir(){
    delete '../user-tests/junit-reports'
}

sourceSets.test.java.srcDirs = [

    'test_files',
]

test {
//with offline instrumentation, the test also depend on the instrument class:
  dependsOn cleanUnitReportDir 
  reports {
    html.destination = file('../user-tests/junit-reports')
    junitXml.destination = file('../user-tests/junit-reports')
  }
  jacoco{
    destinationFile = file('../user-tests/jacoco/jacoco.exec')
  }
}

task cleanCoverageReportDir(){
    delete '../user-tests/jacoco_report'
}

jacoco{
    reportsDirectory = file('../user-tests/jacoco_report')
}

jacocoTestReport {
    dependsOn cleanCoverageReportDir, test
    afterEvaluate {
        classDirectories.setFrom(
        
            fileTree(dir:'../monolith/target/classes' , include: '/**/*.class' ),
        )
    }
}

task tklest_task(){
    dependsOn clean, test
}