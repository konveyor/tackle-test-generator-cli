package irs;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.servlet.http.HttpServletResponse;
import javax.ws.rs.Consumes;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.logging.Logger;

import com.ibm.cardinal.util.CardinalException;
import com.ibm.cardinal.util.CardinalLogger;
import com.ibm.cardinal.util.CardinalString;
import com.ibm.cardinal.util.ClusterObjectManager;
import com.ibm.cardinal.util.SerializationUtil;
import java.util.ArrayList;
import java.util.List;

/**
 * Service class for Employer - Generated by Cardinal
 */

@Path("/EmployerService")
public class EmployerService {
    private static final Logger klu__logger = CardinalLogger.getLogger(EmployerService.class);




    // health check service
    @GET 
    @Path("/health") 
    @Produces(MediaType.TEXT_HTML) 
    public String getHealth() { 
        klu__logger.info("[Employer] getHealth() called");
        return "EmployerService::Health OK"; 
    }



    // service for incrementing object reference count
    @POST
    @Path("/incObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void incObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[EmployerService] incObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.incObjectCount(klu__referenceID);
    }



    // service for decrementing object reference count
    @POST
    @Path("/decObjectCount")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void decObjectCount(@FormParam("klu__referenceID") String klu__referenceID) {
        klu__logger.info("[Employer] decObjectCount() called with ref: "+klu__referenceID);
        ClusterObjectManager.decObjectCount(klu__referenceID);
    }



    // getter service for field "employerName" (generated)
    @GET 
    @Path("/get__employerName")
    @Produces(MediaType.APPLICATION_JSON) 
    public Response get__employerName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {
        String response;
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);
        response = instEmployer.employerName;
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Employer] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }



    // setter service for field "employerName" (generated)
    @POST
    @Path("/set__employerName")
    public void set__employerName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("employerName") String employerName,
        @Context HttpServletResponse servletResponse
    ) {
        String employerName_fpar = employerName;
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);
        instEmployer.employerName = employerName_fpar;
    }


    @POST
    @Path("/Employer_001")
    @Produces(MediaType.APPLICATION_JSON)
    public Response Employer_001(
        @Context HttpServletResponse servletResponse
    ) {

        // call constructor, add created object to cluster object manager, and return ref ID
        Employer instEmployer;
        try {
            instEmployer = new Employer();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to constructor Employer() raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instEmployer);
        instEmployer.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/Employer_002")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    @Produces(MediaType.APPLICATION_JSON)
    public Response Employer_002(
        @FormParam("employerId") String employerId,
        @FormParam("employerName") String employerName,
        @FormParam("employees") String employees,
        @Context HttpServletResponse servletResponse
    ) {

        int employerId_fpar = Integer.parseInt(employerId);

        String employerName_fpar = employerName;

        
        // convert reference ID(s) stored in "employees" to physical/proxy object(s)
        List<Employee> employees_fpar = (List<Employee>)SerializationUtil.decodeWithDynamicTypeCheck(employees);

        // call constructor, add created object to cluster object manager, and return ref ID
        Employer instEmployer;
        try {
            instEmployer = new Employer(employerId_fpar, employerName_fpar, employees_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to constructor Employer() raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        String refid = ClusterObjectManager.putObject(instEmployer);
        instEmployer.setKlu__referenceID(refid);
        JsonObject jsonobj = Json
            .createObjectBuilder()
            .add("return_value", refid)
            .build();
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();
    }

    @POST
    @Path("/getEmployerId")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmployerId(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        int response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            // invoke non-public method via reflection
            Class clazz = instEmployer.getClass();
            java.lang.reflect.Method methodDecl = clazz.getDeclaredMethod("getEmployerId");
            methodDecl.setAccessible(true);
            response = (int)methodDecl.invoke(instEmployer);
        }
    
        catch (java.lang.NoSuchMethodException | java.lang.SecurityException | java.lang.IllegalAccessException |
            java.lang.IllegalArgumentException | java.lang.reflect.InvocationTargetException e) {
            String msg = "Reflective call to non-public method getEmployerId() of Employer raised exception: "+e.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, e);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getEmployerId() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", String.valueOf(response)).build();
        klu__logger.info("[Employer] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setEmployerId")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setEmployerId(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("employerId") String employerId,
        @Context HttpServletResponse servletResponse
    ) {

        int employerId_fpar = Integer.parseInt(employerId);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            // invoke non-public method via reflection
            Class clazz = instEmployer.getClass();
            java.lang.reflect.Method methodDecl = clazz.getDeclaredMethod("setEmployerId", int.class);
            methodDecl.setAccessible(true);
            methodDecl.invoke(instEmployer, employerId_fpar);
        }
    
        catch (java.lang.NoSuchMethodException | java.lang.SecurityException | java.lang.IllegalAccessException |
            java.lang.IllegalArgumentException | java.lang.reflect.InvocationTargetException e) {
            String msg = "Reflective call to non-public method setEmployerId() of Employer raised exception: "+e.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, e);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setEmployerId() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/setEmployerAttributes")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setEmployerAttributes(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("employerId") String employerId,
        @FormParam("employerName") String employerName,
        @FormParam("employees") String employees,
        @Context HttpServletResponse servletResponse
    ) {

        int employerId_fpar = Integer.parseInt(employerId);

        String employerName_fpar = employerName;

        
        // convert reference ID(s) stored in "employees" to physical/proxy object(s)
        List<Employee> employees_fpar = (List<Employee>)SerializationUtil.decodeWithDynamicTypeCheck(employees);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            // invoke non-public method via reflection
            Class clazz = instEmployer.getClass();
            java.lang.reflect.Method methodDecl = clazz.getDeclaredMethod("setEmployerAttributes", int.class, String.class, List.class);
            methodDecl.setAccessible(true);
            methodDecl.invoke(instEmployer, employerId_fpar, employerName_fpar, employees_fpar);
        }
    
        catch (java.lang.NoSuchMethodException | java.lang.SecurityException | java.lang.IllegalAccessException |
            java.lang.IllegalArgumentException | java.lang.reflect.InvocationTargetException e) {
            String msg = "Reflective call to non-public method setEmployerAttributes() of Employer raised exception: "+e.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, e);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setEmployerAttributes() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/addEmployees")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void addEmployees(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("emps") String emps,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "emps" to physical/proxy object(s)
        Employee[] emps_fpar = (Employee[])SerializationUtil.decodeWithDynamicTypeCheck(emps);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instEmployer.addEmployees(emps_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method addEmployees() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getEmployerName")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmployerName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        String response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instEmployer.getEmployerName();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getEmployerName() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        JsonObject jsonobj = jsonresp.add("return_value", response).build();
        klu__logger.info("[Employer] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setEmployerName")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setEmployerName(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("employerName") String employerName,
        @Context HttpServletResponse servletResponse
    ) {

        String employerName_fpar = employerName;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instEmployer.setEmployerName(employerName_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setEmployerName() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

    @POST
    @Path("/getEmployees")
    @Produces(MediaType.APPLICATION_JSON)
    public Response getEmployees(
        @FormParam("klu__referenceID") String klu__referenceID,
        @Context HttpServletResponse servletResponse
    ) {

        List<Employee> response;

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            response = instEmployer.getEmployees();
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method getEmployees() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }
        JsonObjectBuilder jsonresp = Json.createObjectBuilder();
        
        // convert physical/proxy object(s) referenced by "response" to reference ID(s)
        String response_obj = SerializationUtil.encodeWithDynamicTypeCheck(response);
        JsonObject jsonobj = jsonresp.add("return_value", response_obj).build();

        klu__logger.info("[Employer] Returning JSON object: "+jsonobj.toString());
        return Response
            .status(Response.Status.OK)
            .entity(jsonobj)
            .build();

    }

    @POST
    @Path("/setEmployees")
    @Consumes(MediaType.APPLICATION_FORM_URLENCODED)
    public void setEmployees(
        @FormParam("klu__referenceID") String klu__referenceID,
        @FormParam("employees") String employees,
        @Context HttpServletResponse servletResponse
    ) {

        
        // convert reference ID(s) stored in "employees" to physical/proxy object(s)
        List<Employee> employees_fpar = (List<Employee>)SerializationUtil.decodeWithDynamicTypeCheck(employees);

        // dynamically dispatched method: using reference ID, get object from cluster object manager and
        // call method on the object
        Employer instEmployer = (Employer)ClusterObjectManager.getObject(klu__referenceID);

        try {
            instEmployer.setEmployees(employees_fpar);
        }
        catch (java.lang.Throwable t) {
            String msg = "Call to method setEmployees() of Employer raised exception: "+t.getMessage();
            klu__logger.warning(msg);
            throw new WebApplicationException(msg, t, CardinalException.APPLICATION_EXCEPTION);
        }

    }

}